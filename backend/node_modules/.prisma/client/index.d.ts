
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ContactSettings
 * 
 */
export type ContactSettings = $Result.DefaultSelection<Prisma.$ContactSettingsPayload>
/**
 * Model CatalogFile
 * 
 */
export type CatalogFile = $Result.DefaultSelection<Prisma.$CatalogFilePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model StoreLocation
 * 
 */
export type StoreLocation = $Result.DefaultSelection<Prisma.$StoreLocationPayload>
/**
 * Model AboutPage
 * 
 */
export type AboutPage = $Result.DefaultSelection<Prisma.$AboutPagePayload>
/**
 * Model TeamProfile
 * 
 */
export type TeamProfile = $Result.DefaultSelection<Prisma.$TeamProfilePayload>
/**
 * Model DistributorPage
 * 
 */
export type DistributorPage = $Result.DefaultSelection<Prisma.$DistributorPagePayload>
/**
 * Model DistributorStory
 * 
 */
export type DistributorStory = $Result.DefaultSelection<Prisma.$DistributorStoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ContactSettings
 * const contactSettings = await prisma.contactSettings.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ContactSettings
   * const contactSettings = await prisma.contactSettings.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.contactSettings`: Exposes CRUD operations for the **ContactSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactSettings
    * const contactSettings = await prisma.contactSettings.findMany()
    * ```
    */
  get contactSettings(): Prisma.ContactSettingsDelegate<ExtArgs>;

  /**
   * `prisma.catalogFile`: Exposes CRUD operations for the **CatalogFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CatalogFiles
    * const catalogFiles = await prisma.catalogFile.findMany()
    * ```
    */
  get catalogFile(): Prisma.CatalogFileDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.storeLocation`: Exposes CRUD operations for the **StoreLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoreLocations
    * const storeLocations = await prisma.storeLocation.findMany()
    * ```
    */
  get storeLocation(): Prisma.StoreLocationDelegate<ExtArgs>;

  /**
   * `prisma.aboutPage`: Exposes CRUD operations for the **AboutPage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AboutPages
    * const aboutPages = await prisma.aboutPage.findMany()
    * ```
    */
  get aboutPage(): Prisma.AboutPageDelegate<ExtArgs>;

  /**
   * `prisma.teamProfile`: Exposes CRUD operations for the **TeamProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamProfiles
    * const teamProfiles = await prisma.teamProfile.findMany()
    * ```
    */
  get teamProfile(): Prisma.TeamProfileDelegate<ExtArgs>;

  /**
   * `prisma.distributorPage`: Exposes CRUD operations for the **DistributorPage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistributorPages
    * const distributorPages = await prisma.distributorPage.findMany()
    * ```
    */
  get distributorPage(): Prisma.DistributorPageDelegate<ExtArgs>;

  /**
   * `prisma.distributorStory`: Exposes CRUD operations for the **DistributorStory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistributorStories
    * const distributorStories = await prisma.distributorStory.findMany()
    * ```
    */
  get distributorStory(): Prisma.DistributorStoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ContactSettings: 'ContactSettings',
    CatalogFile: 'CatalogFile',
    User: 'User',
    Product: 'Product',
    StoreLocation: 'StoreLocation',
    AboutPage: 'AboutPage',
    TeamProfile: 'TeamProfile',
    DistributorPage: 'DistributorPage',
    DistributorStory: 'DistributorStory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "contactSettings" | "catalogFile" | "user" | "product" | "storeLocation" | "aboutPage" | "teamProfile" | "distributorPage" | "distributorStory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ContactSettings: {
        payload: Prisma.$ContactSettingsPayload<ExtArgs>
        fields: Prisma.ContactSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>
          }
          findFirst: {
            args: Prisma.ContactSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>
          }
          findMany: {
            args: Prisma.ContactSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>[]
          }
          create: {
            args: Prisma.ContactSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>
          }
          createMany: {
            args: Prisma.ContactSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>[]
          }
          delete: {
            args: Prisma.ContactSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>
          }
          update: {
            args: Prisma.ContactSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>
          }
          deleteMany: {
            args: Prisma.ContactSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContactSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactSettingsPayload>
          }
          aggregate: {
            args: Prisma.ContactSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactSettings>
          }
          groupBy: {
            args: Prisma.ContactSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<ContactSettingsCountAggregateOutputType> | number
          }
        }
      }
      CatalogFile: {
        payload: Prisma.$CatalogFilePayload<ExtArgs>
        fields: Prisma.CatalogFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CatalogFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CatalogFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>
          }
          findFirst: {
            args: Prisma.CatalogFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CatalogFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>
          }
          findMany: {
            args: Prisma.CatalogFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>[]
          }
          create: {
            args: Prisma.CatalogFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>
          }
          createMany: {
            args: Prisma.CatalogFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CatalogFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>[]
          }
          delete: {
            args: Prisma.CatalogFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>
          }
          update: {
            args: Prisma.CatalogFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>
          }
          deleteMany: {
            args: Prisma.CatalogFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CatalogFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CatalogFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CatalogFilePayload>
          }
          aggregate: {
            args: Prisma.CatalogFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCatalogFile>
          }
          groupBy: {
            args: Prisma.CatalogFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<CatalogFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.CatalogFileCountArgs<ExtArgs>
            result: $Utils.Optional<CatalogFileCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      StoreLocation: {
        payload: Prisma.$StoreLocationPayload<ExtArgs>
        fields: Prisma.StoreLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>
          }
          findFirst: {
            args: Prisma.StoreLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>
          }
          findMany: {
            args: Prisma.StoreLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>[]
          }
          create: {
            args: Prisma.StoreLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>
          }
          createMany: {
            args: Prisma.StoreLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoreLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>[]
          }
          delete: {
            args: Prisma.StoreLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>
          }
          update: {
            args: Prisma.StoreLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>
          }
          deleteMany: {
            args: Prisma.StoreLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoreLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoreLocationPayload>
          }
          aggregate: {
            args: Prisma.StoreLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStoreLocation>
          }
          groupBy: {
            args: Prisma.StoreLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreLocationCountArgs<ExtArgs>
            result: $Utils.Optional<StoreLocationCountAggregateOutputType> | number
          }
        }
      }
      AboutPage: {
        payload: Prisma.$AboutPagePayload<ExtArgs>
        fields: Prisma.AboutPageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AboutPageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AboutPageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>
          }
          findFirst: {
            args: Prisma.AboutPageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AboutPageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>
          }
          findMany: {
            args: Prisma.AboutPageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>[]
          }
          create: {
            args: Prisma.AboutPageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>
          }
          createMany: {
            args: Prisma.AboutPageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AboutPageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>[]
          }
          delete: {
            args: Prisma.AboutPageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>
          }
          update: {
            args: Prisma.AboutPageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>
          }
          deleteMany: {
            args: Prisma.AboutPageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AboutPageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AboutPageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutPagePayload>
          }
          aggregate: {
            args: Prisma.AboutPageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAboutPage>
          }
          groupBy: {
            args: Prisma.AboutPageGroupByArgs<ExtArgs>
            result: $Utils.Optional<AboutPageGroupByOutputType>[]
          }
          count: {
            args: Prisma.AboutPageCountArgs<ExtArgs>
            result: $Utils.Optional<AboutPageCountAggregateOutputType> | number
          }
        }
      }
      TeamProfile: {
        payload: Prisma.$TeamProfilePayload<ExtArgs>
        fields: Prisma.TeamProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>
          }
          findFirst: {
            args: Prisma.TeamProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>
          }
          findMany: {
            args: Prisma.TeamProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>[]
          }
          create: {
            args: Prisma.TeamProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>
          }
          createMany: {
            args: Prisma.TeamProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>[]
          }
          delete: {
            args: Prisma.TeamProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>
          }
          update: {
            args: Prisma.TeamProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>
          }
          deleteMany: {
            args: Prisma.TeamProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamProfilePayload>
          }
          aggregate: {
            args: Prisma.TeamProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamProfile>
          }
          groupBy: {
            args: Prisma.TeamProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamProfileCountArgs<ExtArgs>
            result: $Utils.Optional<TeamProfileCountAggregateOutputType> | number
          }
        }
      }
      DistributorPage: {
        payload: Prisma.$DistributorPagePayload<ExtArgs>
        fields: Prisma.DistributorPageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistributorPageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistributorPageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>
          }
          findFirst: {
            args: Prisma.DistributorPageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistributorPageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>
          }
          findMany: {
            args: Prisma.DistributorPageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>[]
          }
          create: {
            args: Prisma.DistributorPageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>
          }
          createMany: {
            args: Prisma.DistributorPageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistributorPageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>[]
          }
          delete: {
            args: Prisma.DistributorPageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>
          }
          update: {
            args: Prisma.DistributorPageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>
          }
          deleteMany: {
            args: Prisma.DistributorPageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistributorPageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DistributorPageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorPagePayload>
          }
          aggregate: {
            args: Prisma.DistributorPageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistributorPage>
          }
          groupBy: {
            args: Prisma.DistributorPageGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistributorPageGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistributorPageCountArgs<ExtArgs>
            result: $Utils.Optional<DistributorPageCountAggregateOutputType> | number
          }
        }
      }
      DistributorStory: {
        payload: Prisma.$DistributorStoryPayload<ExtArgs>
        fields: Prisma.DistributorStoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistributorStoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistributorStoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>
          }
          findFirst: {
            args: Prisma.DistributorStoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistributorStoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>
          }
          findMany: {
            args: Prisma.DistributorStoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>[]
          }
          create: {
            args: Prisma.DistributorStoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>
          }
          createMany: {
            args: Prisma.DistributorStoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistributorStoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>[]
          }
          delete: {
            args: Prisma.DistributorStoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>
          }
          update: {
            args: Prisma.DistributorStoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>
          }
          deleteMany: {
            args: Prisma.DistributorStoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistributorStoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DistributorStoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributorStoryPayload>
          }
          aggregate: {
            args: Prisma.DistributorStoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistributorStory>
          }
          groupBy: {
            args: Prisma.DistributorStoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistributorStoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistributorStoryCountArgs<ExtArgs>
            result: $Utils.Optional<DistributorStoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AboutPageCountOutputType
   */

  export type AboutPageCountOutputType = {
    teamProfiles: number
  }

  export type AboutPageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamProfiles?: boolean | AboutPageCountOutputTypeCountTeamProfilesArgs
  }

  // Custom InputTypes
  /**
   * AboutPageCountOutputType without action
   */
  export type AboutPageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPageCountOutputType
     */
    select?: AboutPageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AboutPageCountOutputType without action
   */
  export type AboutPageCountOutputTypeCountTeamProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamProfileWhereInput
  }


  /**
   * Count Type DistributorPageCountOutputType
   */

  export type DistributorPageCountOutputType = {
    stories: number
  }

  export type DistributorPageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stories?: boolean | DistributorPageCountOutputTypeCountStoriesArgs
  }

  // Custom InputTypes
  /**
   * DistributorPageCountOutputType without action
   */
  export type DistributorPageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPageCountOutputType
     */
    select?: DistributorPageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DistributorPageCountOutputType without action
   */
  export type DistributorPageCountOutputTypeCountStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributorStoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ContactSettings
   */

  export type AggregateContactSettings = {
    _count: ContactSettingsCountAggregateOutputType | null
    _avg: ContactSettingsAvgAggregateOutputType | null
    _sum: ContactSettingsSumAggregateOutputType | null
    _min: ContactSettingsMinAggregateOutputType | null
    _max: ContactSettingsMaxAggregateOutputType | null
  }

  export type ContactSettingsAvgAggregateOutputType = {
    id: number | null
  }

  export type ContactSettingsSumAggregateOutputType = {
    id: number | null
  }

  export type ContactSettingsMinAggregateOutputType = {
    id: number | null
    phoneNumber: string | null
    whatsappNumber: string | null
    emailAddress: string | null
    updatedAt: Date | null
  }

  export type ContactSettingsMaxAggregateOutputType = {
    id: number | null
    phoneNumber: string | null
    whatsappNumber: string | null
    emailAddress: string | null
    updatedAt: Date | null
  }

  export type ContactSettingsCountAggregateOutputType = {
    id: number
    phoneNumber: number
    whatsappNumber: number
    emailAddress: number
    updatedAt: number
    _all: number
  }


  export type ContactSettingsAvgAggregateInputType = {
    id?: true
  }

  export type ContactSettingsSumAggregateInputType = {
    id?: true
  }

  export type ContactSettingsMinAggregateInputType = {
    id?: true
    phoneNumber?: true
    whatsappNumber?: true
    emailAddress?: true
    updatedAt?: true
  }

  export type ContactSettingsMaxAggregateInputType = {
    id?: true
    phoneNumber?: true
    whatsappNumber?: true
    emailAddress?: true
    updatedAt?: true
  }

  export type ContactSettingsCountAggregateInputType = {
    id?: true
    phoneNumber?: true
    whatsappNumber?: true
    emailAddress?: true
    updatedAt?: true
    _all?: true
  }

  export type ContactSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactSettings to aggregate.
     */
    where?: ContactSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSettings to fetch.
     */
    orderBy?: ContactSettingsOrderByWithRelationInput | ContactSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactSettings
    **/
    _count?: true | ContactSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactSettingsMaxAggregateInputType
  }

  export type GetContactSettingsAggregateType<T extends ContactSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateContactSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactSettings[P]>
      : GetScalarType<T[P], AggregateContactSettings[P]>
  }




  export type ContactSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactSettingsWhereInput
    orderBy?: ContactSettingsOrderByWithAggregationInput | ContactSettingsOrderByWithAggregationInput[]
    by: ContactSettingsScalarFieldEnum[] | ContactSettingsScalarFieldEnum
    having?: ContactSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactSettingsCountAggregateInputType | true
    _avg?: ContactSettingsAvgAggregateInputType
    _sum?: ContactSettingsSumAggregateInputType
    _min?: ContactSettingsMinAggregateInputType
    _max?: ContactSettingsMaxAggregateInputType
  }

  export type ContactSettingsGroupByOutputType = {
    id: number
    phoneNumber: string
    whatsappNumber: string
    emailAddress: string
    updatedAt: Date
    _count: ContactSettingsCountAggregateOutputType | null
    _avg: ContactSettingsAvgAggregateOutputType | null
    _sum: ContactSettingsSumAggregateOutputType | null
    _min: ContactSettingsMinAggregateOutputType | null
    _max: ContactSettingsMaxAggregateOutputType | null
  }

  type GetContactSettingsGroupByPayload<T extends ContactSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], ContactSettingsGroupByOutputType[P]>
        }
      >
    >


  export type ContactSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    whatsappNumber?: boolean
    emailAddress?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contactSettings"]>

  export type ContactSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    whatsappNumber?: boolean
    emailAddress?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["contactSettings"]>

  export type ContactSettingsSelectScalar = {
    id?: boolean
    phoneNumber?: boolean
    whatsappNumber?: boolean
    emailAddress?: boolean
    updatedAt?: boolean
  }


  export type $ContactSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      phoneNumber: string
      whatsappNumber: string
      emailAddress: string
      updatedAt: Date
    }, ExtArgs["result"]["contactSettings"]>
    composites: {}
  }

  type ContactSettingsGetPayload<S extends boolean | null | undefined | ContactSettingsDefaultArgs> = $Result.GetResult<Prisma.$ContactSettingsPayload, S>

  type ContactSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContactSettingsCountAggregateInputType | true
    }

  export interface ContactSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactSettings'], meta: { name: 'ContactSettings' } }
    /**
     * Find zero or one ContactSettings that matches the filter.
     * @param {ContactSettingsFindUniqueArgs} args - Arguments to find a ContactSettings
     * @example
     * // Get one ContactSettings
     * const contactSettings = await prisma.contactSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactSettingsFindUniqueArgs>(args: SelectSubset<T, ContactSettingsFindUniqueArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContactSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContactSettingsFindUniqueOrThrowArgs} args - Arguments to find a ContactSettings
     * @example
     * // Get one ContactSettings
     * const contactSettings = await prisma.contactSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContactSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsFindFirstArgs} args - Arguments to find a ContactSettings
     * @example
     * // Get one ContactSettings
     * const contactSettings = await prisma.contactSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactSettingsFindFirstArgs>(args?: SelectSubset<T, ContactSettingsFindFirstArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContactSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsFindFirstOrThrowArgs} args - Arguments to find a ContactSettings
     * @example
     * // Get one ContactSettings
     * const contactSettings = await prisma.contactSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContactSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactSettings
     * const contactSettings = await prisma.contactSettings.findMany()
     * 
     * // Get first 10 ContactSettings
     * const contactSettings = await prisma.contactSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactSettingsWithIdOnly = await prisma.contactSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactSettingsFindManyArgs>(args?: SelectSubset<T, ContactSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContactSettings.
     * @param {ContactSettingsCreateArgs} args - Arguments to create a ContactSettings.
     * @example
     * // Create one ContactSettings
     * const ContactSettings = await prisma.contactSettings.create({
     *   data: {
     *     // ... data to create a ContactSettings
     *   }
     * })
     * 
     */
    create<T extends ContactSettingsCreateArgs>(args: SelectSubset<T, ContactSettingsCreateArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContactSettings.
     * @param {ContactSettingsCreateManyArgs} args - Arguments to create many ContactSettings.
     * @example
     * // Create many ContactSettings
     * const contactSettings = await prisma.contactSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactSettingsCreateManyArgs>(args?: SelectSubset<T, ContactSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactSettings and returns the data saved in the database.
     * @param {ContactSettingsCreateManyAndReturnArgs} args - Arguments to create many ContactSettings.
     * @example
     * // Create many ContactSettings
     * const contactSettings = await prisma.contactSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactSettings and only return the `id`
     * const contactSettingsWithIdOnly = await prisma.contactSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContactSettings.
     * @param {ContactSettingsDeleteArgs} args - Arguments to delete one ContactSettings.
     * @example
     * // Delete one ContactSettings
     * const ContactSettings = await prisma.contactSettings.delete({
     *   where: {
     *     // ... filter to delete one ContactSettings
     *   }
     * })
     * 
     */
    delete<T extends ContactSettingsDeleteArgs>(args: SelectSubset<T, ContactSettingsDeleteArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContactSettings.
     * @param {ContactSettingsUpdateArgs} args - Arguments to update one ContactSettings.
     * @example
     * // Update one ContactSettings
     * const contactSettings = await prisma.contactSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactSettingsUpdateArgs>(args: SelectSubset<T, ContactSettingsUpdateArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContactSettings.
     * @param {ContactSettingsDeleteManyArgs} args - Arguments to filter ContactSettings to delete.
     * @example
     * // Delete a few ContactSettings
     * const { count } = await prisma.contactSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactSettingsDeleteManyArgs>(args?: SelectSubset<T, ContactSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactSettings
     * const contactSettings = await prisma.contactSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactSettingsUpdateManyArgs>(args: SelectSubset<T, ContactSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContactSettings.
     * @param {ContactSettingsUpsertArgs} args - Arguments to update or create a ContactSettings.
     * @example
     * // Update or create a ContactSettings
     * const contactSettings = await prisma.contactSettings.upsert({
     *   create: {
     *     // ... data to create a ContactSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactSettings we want to update
     *   }
     * })
     */
    upsert<T extends ContactSettingsUpsertArgs>(args: SelectSubset<T, ContactSettingsUpsertArgs<ExtArgs>>): Prisma__ContactSettingsClient<$Result.GetResult<Prisma.$ContactSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContactSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsCountArgs} args - Arguments to filter ContactSettings to count.
     * @example
     * // Count the number of ContactSettings
     * const count = await prisma.contactSettings.count({
     *   where: {
     *     // ... the filter for the ContactSettings we want to count
     *   }
     * })
    **/
    count<T extends ContactSettingsCountArgs>(
      args?: Subset<T, ContactSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactSettingsAggregateArgs>(args: Subset<T, ContactSettingsAggregateArgs>): Prisma.PrismaPromise<GetContactSettingsAggregateType<T>>

    /**
     * Group by ContactSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactSettingsGroupByArgs['orderBy'] }
        : { orderBy?: ContactSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactSettings model
   */
  readonly fields: ContactSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactSettings model
   */ 
  interface ContactSettingsFieldRefs {
    readonly id: FieldRef<"ContactSettings", 'Int'>
    readonly phoneNumber: FieldRef<"ContactSettings", 'String'>
    readonly whatsappNumber: FieldRef<"ContactSettings", 'String'>
    readonly emailAddress: FieldRef<"ContactSettings", 'String'>
    readonly updatedAt: FieldRef<"ContactSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContactSettings findUnique
   */
  export type ContactSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * Filter, which ContactSettings to fetch.
     */
    where: ContactSettingsWhereUniqueInput
  }

  /**
   * ContactSettings findUniqueOrThrow
   */
  export type ContactSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * Filter, which ContactSettings to fetch.
     */
    where: ContactSettingsWhereUniqueInput
  }

  /**
   * ContactSettings findFirst
   */
  export type ContactSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * Filter, which ContactSettings to fetch.
     */
    where?: ContactSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSettings to fetch.
     */
    orderBy?: ContactSettingsOrderByWithRelationInput | ContactSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactSettings.
     */
    cursor?: ContactSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactSettings.
     */
    distinct?: ContactSettingsScalarFieldEnum | ContactSettingsScalarFieldEnum[]
  }

  /**
   * ContactSettings findFirstOrThrow
   */
  export type ContactSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * Filter, which ContactSettings to fetch.
     */
    where?: ContactSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSettings to fetch.
     */
    orderBy?: ContactSettingsOrderByWithRelationInput | ContactSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactSettings.
     */
    cursor?: ContactSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactSettings.
     */
    distinct?: ContactSettingsScalarFieldEnum | ContactSettingsScalarFieldEnum[]
  }

  /**
   * ContactSettings findMany
   */
  export type ContactSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * Filter, which ContactSettings to fetch.
     */
    where?: ContactSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactSettings to fetch.
     */
    orderBy?: ContactSettingsOrderByWithRelationInput | ContactSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactSettings.
     */
    cursor?: ContactSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactSettings.
     */
    skip?: number
    distinct?: ContactSettingsScalarFieldEnum | ContactSettingsScalarFieldEnum[]
  }

  /**
   * ContactSettings create
   */
  export type ContactSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * The data needed to create a ContactSettings.
     */
    data: XOR<ContactSettingsCreateInput, ContactSettingsUncheckedCreateInput>
  }

  /**
   * ContactSettings createMany
   */
  export type ContactSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactSettings.
     */
    data: ContactSettingsCreateManyInput | ContactSettingsCreateManyInput[]
  }

  /**
   * ContactSettings createManyAndReturn
   */
  export type ContactSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContactSettings.
     */
    data: ContactSettingsCreateManyInput | ContactSettingsCreateManyInput[]
  }

  /**
   * ContactSettings update
   */
  export type ContactSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * The data needed to update a ContactSettings.
     */
    data: XOR<ContactSettingsUpdateInput, ContactSettingsUncheckedUpdateInput>
    /**
     * Choose, which ContactSettings to update.
     */
    where: ContactSettingsWhereUniqueInput
  }

  /**
   * ContactSettings updateMany
   */
  export type ContactSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactSettings.
     */
    data: XOR<ContactSettingsUpdateManyMutationInput, ContactSettingsUncheckedUpdateManyInput>
    /**
     * Filter which ContactSettings to update
     */
    where?: ContactSettingsWhereInput
  }

  /**
   * ContactSettings upsert
   */
  export type ContactSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * The filter to search for the ContactSettings to update in case it exists.
     */
    where: ContactSettingsWhereUniqueInput
    /**
     * In case the ContactSettings found by the `where` argument doesn't exist, create a new ContactSettings with this data.
     */
    create: XOR<ContactSettingsCreateInput, ContactSettingsUncheckedCreateInput>
    /**
     * In case the ContactSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactSettingsUpdateInput, ContactSettingsUncheckedUpdateInput>
  }

  /**
   * ContactSettings delete
   */
  export type ContactSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
    /**
     * Filter which ContactSettings to delete.
     */
    where: ContactSettingsWhereUniqueInput
  }

  /**
   * ContactSettings deleteMany
   */
  export type ContactSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactSettings to delete
     */
    where?: ContactSettingsWhereInput
  }

  /**
   * ContactSettings without action
   */
  export type ContactSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactSettings
     */
    select?: ContactSettingsSelect<ExtArgs> | null
  }


  /**
   * Model CatalogFile
   */

  export type AggregateCatalogFile = {
    _count: CatalogFileCountAggregateOutputType | null
    _avg: CatalogFileAvgAggregateOutputType | null
    _sum: CatalogFileSumAggregateOutputType | null
    _min: CatalogFileMinAggregateOutputType | null
    _max: CatalogFileMaxAggregateOutputType | null
  }

  export type CatalogFileAvgAggregateOutputType = {
    id: number | null
  }

  export type CatalogFileSumAggregateOutputType = {
    id: number | null
  }

  export type CatalogFileMinAggregateOutputType = {
    id: number | null
    fileUrl: string | null
    fileName: string | null
    version: string | null
    uploadedAt: Date | null
    isCurrent: boolean | null
  }

  export type CatalogFileMaxAggregateOutputType = {
    id: number | null
    fileUrl: string | null
    fileName: string | null
    version: string | null
    uploadedAt: Date | null
    isCurrent: boolean | null
  }

  export type CatalogFileCountAggregateOutputType = {
    id: number
    fileUrl: number
    fileName: number
    version: number
    uploadedAt: number
    isCurrent: number
    _all: number
  }


  export type CatalogFileAvgAggregateInputType = {
    id?: true
  }

  export type CatalogFileSumAggregateInputType = {
    id?: true
  }

  export type CatalogFileMinAggregateInputType = {
    id?: true
    fileUrl?: true
    fileName?: true
    version?: true
    uploadedAt?: true
    isCurrent?: true
  }

  export type CatalogFileMaxAggregateInputType = {
    id?: true
    fileUrl?: true
    fileName?: true
    version?: true
    uploadedAt?: true
    isCurrent?: true
  }

  export type CatalogFileCountAggregateInputType = {
    id?: true
    fileUrl?: true
    fileName?: true
    version?: true
    uploadedAt?: true
    isCurrent?: true
    _all?: true
  }

  export type CatalogFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatalogFile to aggregate.
     */
    where?: CatalogFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogFiles to fetch.
     */
    orderBy?: CatalogFileOrderByWithRelationInput | CatalogFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CatalogFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CatalogFiles
    **/
    _count?: true | CatalogFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CatalogFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CatalogFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CatalogFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CatalogFileMaxAggregateInputType
  }

  export type GetCatalogFileAggregateType<T extends CatalogFileAggregateArgs> = {
        [P in keyof T & keyof AggregateCatalogFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCatalogFile[P]>
      : GetScalarType<T[P], AggregateCatalogFile[P]>
  }




  export type CatalogFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CatalogFileWhereInput
    orderBy?: CatalogFileOrderByWithAggregationInput | CatalogFileOrderByWithAggregationInput[]
    by: CatalogFileScalarFieldEnum[] | CatalogFileScalarFieldEnum
    having?: CatalogFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CatalogFileCountAggregateInputType | true
    _avg?: CatalogFileAvgAggregateInputType
    _sum?: CatalogFileSumAggregateInputType
    _min?: CatalogFileMinAggregateInputType
    _max?: CatalogFileMaxAggregateInputType
  }

  export type CatalogFileGroupByOutputType = {
    id: number
    fileUrl: string
    fileName: string
    version: string | null
    uploadedAt: Date
    isCurrent: boolean
    _count: CatalogFileCountAggregateOutputType | null
    _avg: CatalogFileAvgAggregateOutputType | null
    _sum: CatalogFileSumAggregateOutputType | null
    _min: CatalogFileMinAggregateOutputType | null
    _max: CatalogFileMaxAggregateOutputType | null
  }

  type GetCatalogFileGroupByPayload<T extends CatalogFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CatalogFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CatalogFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CatalogFileGroupByOutputType[P]>
            : GetScalarType<T[P], CatalogFileGroupByOutputType[P]>
        }
      >
    >


  export type CatalogFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileUrl?: boolean
    fileName?: boolean
    version?: boolean
    uploadedAt?: boolean
    isCurrent?: boolean
  }, ExtArgs["result"]["catalogFile"]>

  export type CatalogFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileUrl?: boolean
    fileName?: boolean
    version?: boolean
    uploadedAt?: boolean
    isCurrent?: boolean
  }, ExtArgs["result"]["catalogFile"]>

  export type CatalogFileSelectScalar = {
    id?: boolean
    fileUrl?: boolean
    fileName?: boolean
    version?: boolean
    uploadedAt?: boolean
    isCurrent?: boolean
  }


  export type $CatalogFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CatalogFile"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fileUrl: string
      fileName: string
      version: string | null
      uploadedAt: Date
      isCurrent: boolean
    }, ExtArgs["result"]["catalogFile"]>
    composites: {}
  }

  type CatalogFileGetPayload<S extends boolean | null | undefined | CatalogFileDefaultArgs> = $Result.GetResult<Prisma.$CatalogFilePayload, S>

  type CatalogFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CatalogFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CatalogFileCountAggregateInputType | true
    }

  export interface CatalogFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CatalogFile'], meta: { name: 'CatalogFile' } }
    /**
     * Find zero or one CatalogFile that matches the filter.
     * @param {CatalogFileFindUniqueArgs} args - Arguments to find a CatalogFile
     * @example
     * // Get one CatalogFile
     * const catalogFile = await prisma.catalogFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CatalogFileFindUniqueArgs>(args: SelectSubset<T, CatalogFileFindUniqueArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CatalogFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CatalogFileFindUniqueOrThrowArgs} args - Arguments to find a CatalogFile
     * @example
     * // Get one CatalogFile
     * const catalogFile = await prisma.catalogFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CatalogFileFindUniqueOrThrowArgs>(args: SelectSubset<T, CatalogFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CatalogFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileFindFirstArgs} args - Arguments to find a CatalogFile
     * @example
     * // Get one CatalogFile
     * const catalogFile = await prisma.catalogFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CatalogFileFindFirstArgs>(args?: SelectSubset<T, CatalogFileFindFirstArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CatalogFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileFindFirstOrThrowArgs} args - Arguments to find a CatalogFile
     * @example
     * // Get one CatalogFile
     * const catalogFile = await prisma.catalogFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CatalogFileFindFirstOrThrowArgs>(args?: SelectSubset<T, CatalogFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CatalogFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CatalogFiles
     * const catalogFiles = await prisma.catalogFile.findMany()
     * 
     * // Get first 10 CatalogFiles
     * const catalogFiles = await prisma.catalogFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const catalogFileWithIdOnly = await prisma.catalogFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CatalogFileFindManyArgs>(args?: SelectSubset<T, CatalogFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CatalogFile.
     * @param {CatalogFileCreateArgs} args - Arguments to create a CatalogFile.
     * @example
     * // Create one CatalogFile
     * const CatalogFile = await prisma.catalogFile.create({
     *   data: {
     *     // ... data to create a CatalogFile
     *   }
     * })
     * 
     */
    create<T extends CatalogFileCreateArgs>(args: SelectSubset<T, CatalogFileCreateArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CatalogFiles.
     * @param {CatalogFileCreateManyArgs} args - Arguments to create many CatalogFiles.
     * @example
     * // Create many CatalogFiles
     * const catalogFile = await prisma.catalogFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CatalogFileCreateManyArgs>(args?: SelectSubset<T, CatalogFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CatalogFiles and returns the data saved in the database.
     * @param {CatalogFileCreateManyAndReturnArgs} args - Arguments to create many CatalogFiles.
     * @example
     * // Create many CatalogFiles
     * const catalogFile = await prisma.catalogFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CatalogFiles and only return the `id`
     * const catalogFileWithIdOnly = await prisma.catalogFile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CatalogFileCreateManyAndReturnArgs>(args?: SelectSubset<T, CatalogFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CatalogFile.
     * @param {CatalogFileDeleteArgs} args - Arguments to delete one CatalogFile.
     * @example
     * // Delete one CatalogFile
     * const CatalogFile = await prisma.catalogFile.delete({
     *   where: {
     *     // ... filter to delete one CatalogFile
     *   }
     * })
     * 
     */
    delete<T extends CatalogFileDeleteArgs>(args: SelectSubset<T, CatalogFileDeleteArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CatalogFile.
     * @param {CatalogFileUpdateArgs} args - Arguments to update one CatalogFile.
     * @example
     * // Update one CatalogFile
     * const catalogFile = await prisma.catalogFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CatalogFileUpdateArgs>(args: SelectSubset<T, CatalogFileUpdateArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CatalogFiles.
     * @param {CatalogFileDeleteManyArgs} args - Arguments to filter CatalogFiles to delete.
     * @example
     * // Delete a few CatalogFiles
     * const { count } = await prisma.catalogFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CatalogFileDeleteManyArgs>(args?: SelectSubset<T, CatalogFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CatalogFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CatalogFiles
     * const catalogFile = await prisma.catalogFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CatalogFileUpdateManyArgs>(args: SelectSubset<T, CatalogFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CatalogFile.
     * @param {CatalogFileUpsertArgs} args - Arguments to update or create a CatalogFile.
     * @example
     * // Update or create a CatalogFile
     * const catalogFile = await prisma.catalogFile.upsert({
     *   create: {
     *     // ... data to create a CatalogFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CatalogFile we want to update
     *   }
     * })
     */
    upsert<T extends CatalogFileUpsertArgs>(args: SelectSubset<T, CatalogFileUpsertArgs<ExtArgs>>): Prisma__CatalogFileClient<$Result.GetResult<Prisma.$CatalogFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CatalogFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileCountArgs} args - Arguments to filter CatalogFiles to count.
     * @example
     * // Count the number of CatalogFiles
     * const count = await prisma.catalogFile.count({
     *   where: {
     *     // ... the filter for the CatalogFiles we want to count
     *   }
     * })
    **/
    count<T extends CatalogFileCountArgs>(
      args?: Subset<T, CatalogFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CatalogFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CatalogFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CatalogFileAggregateArgs>(args: Subset<T, CatalogFileAggregateArgs>): Prisma.PrismaPromise<GetCatalogFileAggregateType<T>>

    /**
     * Group by CatalogFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CatalogFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CatalogFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CatalogFileGroupByArgs['orderBy'] }
        : { orderBy?: CatalogFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CatalogFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCatalogFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CatalogFile model
   */
  readonly fields: CatalogFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CatalogFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CatalogFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CatalogFile model
   */ 
  interface CatalogFileFieldRefs {
    readonly id: FieldRef<"CatalogFile", 'Int'>
    readonly fileUrl: FieldRef<"CatalogFile", 'String'>
    readonly fileName: FieldRef<"CatalogFile", 'String'>
    readonly version: FieldRef<"CatalogFile", 'String'>
    readonly uploadedAt: FieldRef<"CatalogFile", 'DateTime'>
    readonly isCurrent: FieldRef<"CatalogFile", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * CatalogFile findUnique
   */
  export type CatalogFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * Filter, which CatalogFile to fetch.
     */
    where: CatalogFileWhereUniqueInput
  }

  /**
   * CatalogFile findUniqueOrThrow
   */
  export type CatalogFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * Filter, which CatalogFile to fetch.
     */
    where: CatalogFileWhereUniqueInput
  }

  /**
   * CatalogFile findFirst
   */
  export type CatalogFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * Filter, which CatalogFile to fetch.
     */
    where?: CatalogFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogFiles to fetch.
     */
    orderBy?: CatalogFileOrderByWithRelationInput | CatalogFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatalogFiles.
     */
    cursor?: CatalogFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatalogFiles.
     */
    distinct?: CatalogFileScalarFieldEnum | CatalogFileScalarFieldEnum[]
  }

  /**
   * CatalogFile findFirstOrThrow
   */
  export type CatalogFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * Filter, which CatalogFile to fetch.
     */
    where?: CatalogFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogFiles to fetch.
     */
    orderBy?: CatalogFileOrderByWithRelationInput | CatalogFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CatalogFiles.
     */
    cursor?: CatalogFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CatalogFiles.
     */
    distinct?: CatalogFileScalarFieldEnum | CatalogFileScalarFieldEnum[]
  }

  /**
   * CatalogFile findMany
   */
  export type CatalogFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * Filter, which CatalogFiles to fetch.
     */
    where?: CatalogFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CatalogFiles to fetch.
     */
    orderBy?: CatalogFileOrderByWithRelationInput | CatalogFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CatalogFiles.
     */
    cursor?: CatalogFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CatalogFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CatalogFiles.
     */
    skip?: number
    distinct?: CatalogFileScalarFieldEnum | CatalogFileScalarFieldEnum[]
  }

  /**
   * CatalogFile create
   */
  export type CatalogFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * The data needed to create a CatalogFile.
     */
    data: XOR<CatalogFileCreateInput, CatalogFileUncheckedCreateInput>
  }

  /**
   * CatalogFile createMany
   */
  export type CatalogFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CatalogFiles.
     */
    data: CatalogFileCreateManyInput | CatalogFileCreateManyInput[]
  }

  /**
   * CatalogFile createManyAndReturn
   */
  export type CatalogFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CatalogFiles.
     */
    data: CatalogFileCreateManyInput | CatalogFileCreateManyInput[]
  }

  /**
   * CatalogFile update
   */
  export type CatalogFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * The data needed to update a CatalogFile.
     */
    data: XOR<CatalogFileUpdateInput, CatalogFileUncheckedUpdateInput>
    /**
     * Choose, which CatalogFile to update.
     */
    where: CatalogFileWhereUniqueInput
  }

  /**
   * CatalogFile updateMany
   */
  export type CatalogFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CatalogFiles.
     */
    data: XOR<CatalogFileUpdateManyMutationInput, CatalogFileUncheckedUpdateManyInput>
    /**
     * Filter which CatalogFiles to update
     */
    where?: CatalogFileWhereInput
  }

  /**
   * CatalogFile upsert
   */
  export type CatalogFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * The filter to search for the CatalogFile to update in case it exists.
     */
    where: CatalogFileWhereUniqueInput
    /**
     * In case the CatalogFile found by the `where` argument doesn't exist, create a new CatalogFile with this data.
     */
    create: XOR<CatalogFileCreateInput, CatalogFileUncheckedCreateInput>
    /**
     * In case the CatalogFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CatalogFileUpdateInput, CatalogFileUncheckedUpdateInput>
  }

  /**
   * CatalogFile delete
   */
  export type CatalogFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
    /**
     * Filter which CatalogFile to delete.
     */
    where: CatalogFileWhereUniqueInput
  }

  /**
   * CatalogFile deleteMany
   */
  export type CatalogFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CatalogFiles to delete
     */
    where?: CatalogFileWhereInput
  }

  /**
   * CatalogFile without action
   */
  export type CatalogFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CatalogFile
     */
    select?: CatalogFileSelect<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    rating: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    rating: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    imageUrl: string | null
    category: string | null
    price: number | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    imageUrl: string | null
    category: string | null
    price: number | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    imageUrl: number
    category: number
    price: number
    rating: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    rating?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    rating?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    imageUrl?: true
    category?: true
    price?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    imageUrl?: true
    category?: true
    price?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    imageUrl?: true
    category?: true
    price?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string
    imageUrl: string
    category: string
    price: number | null
    rating: number | null
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    category?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      imageUrl: string
      category: string
      price: number | null
      rating: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly imageUrl: FieldRef<"Product", 'String'>
    readonly category: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Float'>
    readonly rating: FieldRef<"Product", 'Float'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
  }


  /**
   * Model StoreLocation
   */

  export type AggregateStoreLocation = {
    _count: StoreLocationCountAggregateOutputType | null
    _avg: StoreLocationAvgAggregateOutputType | null
    _sum: StoreLocationSumAggregateOutputType | null
    _min: StoreLocationMinAggregateOutputType | null
    _max: StoreLocationMaxAggregateOutputType | null
  }

  export type StoreLocationAvgAggregateOutputType = {
    id: number | null
    lat: number | null
    lng: number | null
  }

  export type StoreLocationSumAggregateOutputType = {
    id: number | null
    lat: number | null
    lng: number | null
  }

  export type StoreLocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    lat: number | null
    lng: number | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreLocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    lat: number | null
    lng: number | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreLocationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    lat: number
    lng: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StoreLocationAvgAggregateInputType = {
    id?: true
    lat?: true
    lng?: true
  }

  export type StoreLocationSumAggregateInputType = {
    id?: true
    lat?: true
    lng?: true
  }

  export type StoreLocationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    lat?: true
    lng?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreLocationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    lat?: true
    lng?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreLocationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    lat?: true
    lng?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoreLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoreLocation to aggregate.
     */
    where?: StoreLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreLocations to fetch.
     */
    orderBy?: StoreLocationOrderByWithRelationInput | StoreLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StoreLocations
    **/
    _count?: true | StoreLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreLocationMaxAggregateInputType
  }

  export type GetStoreLocationAggregateType<T extends StoreLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateStoreLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoreLocation[P]>
      : GetScalarType<T[P], AggregateStoreLocation[P]>
  }




  export type StoreLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreLocationWhereInput
    orderBy?: StoreLocationOrderByWithAggregationInput | StoreLocationOrderByWithAggregationInput[]
    by: StoreLocationScalarFieldEnum[] | StoreLocationScalarFieldEnum
    having?: StoreLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreLocationCountAggregateInputType | true
    _avg?: StoreLocationAvgAggregateInputType
    _sum?: StoreLocationSumAggregateInputType
    _min?: StoreLocationMinAggregateInputType
    _max?: StoreLocationMaxAggregateInputType
  }

  export type StoreLocationGroupByOutputType = {
    id: number
    name: string
    address: string
    lat: number
    lng: number
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: StoreLocationCountAggregateOutputType | null
    _avg: StoreLocationAvgAggregateOutputType | null
    _sum: StoreLocationSumAggregateOutputType | null
    _min: StoreLocationMinAggregateOutputType | null
    _max: StoreLocationMaxAggregateOutputType | null
  }

  type GetStoreLocationGroupByPayload<T extends StoreLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreLocationGroupByOutputType[P]>
            : GetScalarType<T[P], StoreLocationGroupByOutputType[P]>
        }
      >
    >


  export type StoreLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    lat?: boolean
    lng?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storeLocation"]>

  export type StoreLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    lat?: boolean
    lng?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["storeLocation"]>

  export type StoreLocationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    lat?: boolean
    lng?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $StoreLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StoreLocation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      lat: number
      lng: number
      phone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["storeLocation"]>
    composites: {}
  }

  type StoreLocationGetPayload<S extends boolean | null | undefined | StoreLocationDefaultArgs> = $Result.GetResult<Prisma.$StoreLocationPayload, S>

  type StoreLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoreLocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StoreLocationCountAggregateInputType | true
    }

  export interface StoreLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StoreLocation'], meta: { name: 'StoreLocation' } }
    /**
     * Find zero or one StoreLocation that matches the filter.
     * @param {StoreLocationFindUniqueArgs} args - Arguments to find a StoreLocation
     * @example
     * // Get one StoreLocation
     * const storeLocation = await prisma.storeLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreLocationFindUniqueArgs>(args: SelectSubset<T, StoreLocationFindUniqueArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StoreLocation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StoreLocationFindUniqueOrThrowArgs} args - Arguments to find a StoreLocation
     * @example
     * // Get one StoreLocation
     * const storeLocation = await prisma.storeLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StoreLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationFindFirstArgs} args - Arguments to find a StoreLocation
     * @example
     * // Get one StoreLocation
     * const storeLocation = await prisma.storeLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreLocationFindFirstArgs>(args?: SelectSubset<T, StoreLocationFindFirstArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StoreLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationFindFirstOrThrowArgs} args - Arguments to find a StoreLocation
     * @example
     * // Get one StoreLocation
     * const storeLocation = await prisma.storeLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StoreLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoreLocations
     * const storeLocations = await prisma.storeLocation.findMany()
     * 
     * // Get first 10 StoreLocations
     * const storeLocations = await prisma.storeLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeLocationWithIdOnly = await prisma.storeLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoreLocationFindManyArgs>(args?: SelectSubset<T, StoreLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StoreLocation.
     * @param {StoreLocationCreateArgs} args - Arguments to create a StoreLocation.
     * @example
     * // Create one StoreLocation
     * const StoreLocation = await prisma.storeLocation.create({
     *   data: {
     *     // ... data to create a StoreLocation
     *   }
     * })
     * 
     */
    create<T extends StoreLocationCreateArgs>(args: SelectSubset<T, StoreLocationCreateArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StoreLocations.
     * @param {StoreLocationCreateManyArgs} args - Arguments to create many StoreLocations.
     * @example
     * // Create many StoreLocations
     * const storeLocation = await prisma.storeLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreLocationCreateManyArgs>(args?: SelectSubset<T, StoreLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StoreLocations and returns the data saved in the database.
     * @param {StoreLocationCreateManyAndReturnArgs} args - Arguments to create many StoreLocations.
     * @example
     * // Create many StoreLocations
     * const storeLocation = await prisma.storeLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StoreLocations and only return the `id`
     * const storeLocationWithIdOnly = await prisma.storeLocation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoreLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, StoreLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StoreLocation.
     * @param {StoreLocationDeleteArgs} args - Arguments to delete one StoreLocation.
     * @example
     * // Delete one StoreLocation
     * const StoreLocation = await prisma.storeLocation.delete({
     *   where: {
     *     // ... filter to delete one StoreLocation
     *   }
     * })
     * 
     */
    delete<T extends StoreLocationDeleteArgs>(args: SelectSubset<T, StoreLocationDeleteArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StoreLocation.
     * @param {StoreLocationUpdateArgs} args - Arguments to update one StoreLocation.
     * @example
     * // Update one StoreLocation
     * const storeLocation = await prisma.storeLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreLocationUpdateArgs>(args: SelectSubset<T, StoreLocationUpdateArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StoreLocations.
     * @param {StoreLocationDeleteManyArgs} args - Arguments to filter StoreLocations to delete.
     * @example
     * // Delete a few StoreLocations
     * const { count } = await prisma.storeLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreLocationDeleteManyArgs>(args?: SelectSubset<T, StoreLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoreLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoreLocations
     * const storeLocation = await prisma.storeLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreLocationUpdateManyArgs>(args: SelectSubset<T, StoreLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StoreLocation.
     * @param {StoreLocationUpsertArgs} args - Arguments to update or create a StoreLocation.
     * @example
     * // Update or create a StoreLocation
     * const storeLocation = await prisma.storeLocation.upsert({
     *   create: {
     *     // ... data to create a StoreLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoreLocation we want to update
     *   }
     * })
     */
    upsert<T extends StoreLocationUpsertArgs>(args: SelectSubset<T, StoreLocationUpsertArgs<ExtArgs>>): Prisma__StoreLocationClient<$Result.GetResult<Prisma.$StoreLocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StoreLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationCountArgs} args - Arguments to filter StoreLocations to count.
     * @example
     * // Count the number of StoreLocations
     * const count = await prisma.storeLocation.count({
     *   where: {
     *     // ... the filter for the StoreLocations we want to count
     *   }
     * })
    **/
    count<T extends StoreLocationCountArgs>(
      args?: Subset<T, StoreLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoreLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreLocationAggregateArgs>(args: Subset<T, StoreLocationAggregateArgs>): Prisma.PrismaPromise<GetStoreLocationAggregateType<T>>

    /**
     * Group by StoreLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreLocationGroupByArgs['orderBy'] }
        : { orderBy?: StoreLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StoreLocation model
   */
  readonly fields: StoreLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StoreLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StoreLocation model
   */ 
  interface StoreLocationFieldRefs {
    readonly id: FieldRef<"StoreLocation", 'Int'>
    readonly name: FieldRef<"StoreLocation", 'String'>
    readonly address: FieldRef<"StoreLocation", 'String'>
    readonly lat: FieldRef<"StoreLocation", 'Float'>
    readonly lng: FieldRef<"StoreLocation", 'Float'>
    readonly phone: FieldRef<"StoreLocation", 'String'>
    readonly createdAt: FieldRef<"StoreLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"StoreLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StoreLocation findUnique
   */
  export type StoreLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * Filter, which StoreLocation to fetch.
     */
    where: StoreLocationWhereUniqueInput
  }

  /**
   * StoreLocation findUniqueOrThrow
   */
  export type StoreLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * Filter, which StoreLocation to fetch.
     */
    where: StoreLocationWhereUniqueInput
  }

  /**
   * StoreLocation findFirst
   */
  export type StoreLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * Filter, which StoreLocation to fetch.
     */
    where?: StoreLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreLocations to fetch.
     */
    orderBy?: StoreLocationOrderByWithRelationInput | StoreLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoreLocations.
     */
    cursor?: StoreLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoreLocations.
     */
    distinct?: StoreLocationScalarFieldEnum | StoreLocationScalarFieldEnum[]
  }

  /**
   * StoreLocation findFirstOrThrow
   */
  export type StoreLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * Filter, which StoreLocation to fetch.
     */
    where?: StoreLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreLocations to fetch.
     */
    orderBy?: StoreLocationOrderByWithRelationInput | StoreLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoreLocations.
     */
    cursor?: StoreLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoreLocations.
     */
    distinct?: StoreLocationScalarFieldEnum | StoreLocationScalarFieldEnum[]
  }

  /**
   * StoreLocation findMany
   */
  export type StoreLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * Filter, which StoreLocations to fetch.
     */
    where?: StoreLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoreLocations to fetch.
     */
    orderBy?: StoreLocationOrderByWithRelationInput | StoreLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StoreLocations.
     */
    cursor?: StoreLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoreLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoreLocations.
     */
    skip?: number
    distinct?: StoreLocationScalarFieldEnum | StoreLocationScalarFieldEnum[]
  }

  /**
   * StoreLocation create
   */
  export type StoreLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * The data needed to create a StoreLocation.
     */
    data: XOR<StoreLocationCreateInput, StoreLocationUncheckedCreateInput>
  }

  /**
   * StoreLocation createMany
   */
  export type StoreLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StoreLocations.
     */
    data: StoreLocationCreateManyInput | StoreLocationCreateManyInput[]
  }

  /**
   * StoreLocation createManyAndReturn
   */
  export type StoreLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StoreLocations.
     */
    data: StoreLocationCreateManyInput | StoreLocationCreateManyInput[]
  }

  /**
   * StoreLocation update
   */
  export type StoreLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * The data needed to update a StoreLocation.
     */
    data: XOR<StoreLocationUpdateInput, StoreLocationUncheckedUpdateInput>
    /**
     * Choose, which StoreLocation to update.
     */
    where: StoreLocationWhereUniqueInput
  }

  /**
   * StoreLocation updateMany
   */
  export type StoreLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StoreLocations.
     */
    data: XOR<StoreLocationUpdateManyMutationInput, StoreLocationUncheckedUpdateManyInput>
    /**
     * Filter which StoreLocations to update
     */
    where?: StoreLocationWhereInput
  }

  /**
   * StoreLocation upsert
   */
  export type StoreLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * The filter to search for the StoreLocation to update in case it exists.
     */
    where: StoreLocationWhereUniqueInput
    /**
     * In case the StoreLocation found by the `where` argument doesn't exist, create a new StoreLocation with this data.
     */
    create: XOR<StoreLocationCreateInput, StoreLocationUncheckedCreateInput>
    /**
     * In case the StoreLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreLocationUpdateInput, StoreLocationUncheckedUpdateInput>
  }

  /**
   * StoreLocation delete
   */
  export type StoreLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
    /**
     * Filter which StoreLocation to delete.
     */
    where: StoreLocationWhereUniqueInput
  }

  /**
   * StoreLocation deleteMany
   */
  export type StoreLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoreLocations to delete
     */
    where?: StoreLocationWhereInput
  }

  /**
   * StoreLocation without action
   */
  export type StoreLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreLocation
     */
    select?: StoreLocationSelect<ExtArgs> | null
  }


  /**
   * Model AboutPage
   */

  export type AggregateAboutPage = {
    _count: AboutPageCountAggregateOutputType | null
    _avg: AboutPageAvgAggregateOutputType | null
    _sum: AboutPageSumAggregateOutputType | null
    _min: AboutPageMinAggregateOutputType | null
    _max: AboutPageMaxAggregateOutputType | null
  }

  export type AboutPageAvgAggregateOutputType = {
    id: number | null
  }

  export type AboutPageSumAggregateOutputType = {
    id: number | null
  }

  export type AboutPageMinAggregateOutputType = {
    id: number | null
    heroImage: string | null
    story: string | null
    stats: string | null
    manufacturingExcellence: string | null
    updatedAt: Date | null
  }

  export type AboutPageMaxAggregateOutputType = {
    id: number | null
    heroImage: string | null
    story: string | null
    stats: string | null
    manufacturingExcellence: string | null
    updatedAt: Date | null
  }

  export type AboutPageCountAggregateOutputType = {
    id: number
    heroImage: number
    story: number
    stats: number
    manufacturingExcellence: number
    updatedAt: number
    _all: number
  }


  export type AboutPageAvgAggregateInputType = {
    id?: true
  }

  export type AboutPageSumAggregateInputType = {
    id?: true
  }

  export type AboutPageMinAggregateInputType = {
    id?: true
    heroImage?: true
    story?: true
    stats?: true
    manufacturingExcellence?: true
    updatedAt?: true
  }

  export type AboutPageMaxAggregateInputType = {
    id?: true
    heroImage?: true
    story?: true
    stats?: true
    manufacturingExcellence?: true
    updatedAt?: true
  }

  export type AboutPageCountAggregateInputType = {
    id?: true
    heroImage?: true
    story?: true
    stats?: true
    manufacturingExcellence?: true
    updatedAt?: true
    _all?: true
  }

  export type AboutPageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutPage to aggregate.
     */
    where?: AboutPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutPages to fetch.
     */
    orderBy?: AboutPageOrderByWithRelationInput | AboutPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AboutPages
    **/
    _count?: true | AboutPageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutPageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutPageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutPageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutPageMaxAggregateInputType
  }

  export type GetAboutPageAggregateType<T extends AboutPageAggregateArgs> = {
        [P in keyof T & keyof AggregateAboutPage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAboutPage[P]>
      : GetScalarType<T[P], AggregateAboutPage[P]>
  }




  export type AboutPageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutPageWhereInput
    orderBy?: AboutPageOrderByWithAggregationInput | AboutPageOrderByWithAggregationInput[]
    by: AboutPageScalarFieldEnum[] | AboutPageScalarFieldEnum
    having?: AboutPageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutPageCountAggregateInputType | true
    _avg?: AboutPageAvgAggregateInputType
    _sum?: AboutPageSumAggregateInputType
    _min?: AboutPageMinAggregateInputType
    _max?: AboutPageMaxAggregateInputType
  }

  export type AboutPageGroupByOutputType = {
    id: number
    heroImage: string
    story: string
    stats: string
    manufacturingExcellence: string
    updatedAt: Date
    _count: AboutPageCountAggregateOutputType | null
    _avg: AboutPageAvgAggregateOutputType | null
    _sum: AboutPageSumAggregateOutputType | null
    _min: AboutPageMinAggregateOutputType | null
    _max: AboutPageMaxAggregateOutputType | null
  }

  type GetAboutPageGroupByPayload<T extends AboutPageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AboutPageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutPageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutPageGroupByOutputType[P]>
            : GetScalarType<T[P], AboutPageGroupByOutputType[P]>
        }
      >
    >


  export type AboutPageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    heroImage?: boolean
    story?: boolean
    stats?: boolean
    manufacturingExcellence?: boolean
    updatedAt?: boolean
    teamProfiles?: boolean | AboutPage$teamProfilesArgs<ExtArgs>
    _count?: boolean | AboutPageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aboutPage"]>

  export type AboutPageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    heroImage?: boolean
    story?: boolean
    stats?: boolean
    manufacturingExcellence?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aboutPage"]>

  export type AboutPageSelectScalar = {
    id?: boolean
    heroImage?: boolean
    story?: boolean
    stats?: boolean
    manufacturingExcellence?: boolean
    updatedAt?: boolean
  }

  export type AboutPageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamProfiles?: boolean | AboutPage$teamProfilesArgs<ExtArgs>
    _count?: boolean | AboutPageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AboutPageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AboutPagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AboutPage"
    objects: {
      teamProfiles: Prisma.$TeamProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      heroImage: string
      story: string
      stats: string
      manufacturingExcellence: string
      updatedAt: Date
    }, ExtArgs["result"]["aboutPage"]>
    composites: {}
  }

  type AboutPageGetPayload<S extends boolean | null | undefined | AboutPageDefaultArgs> = $Result.GetResult<Prisma.$AboutPagePayload, S>

  type AboutPageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AboutPageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AboutPageCountAggregateInputType | true
    }

  export interface AboutPageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AboutPage'], meta: { name: 'AboutPage' } }
    /**
     * Find zero or one AboutPage that matches the filter.
     * @param {AboutPageFindUniqueArgs} args - Arguments to find a AboutPage
     * @example
     * // Get one AboutPage
     * const aboutPage = await prisma.aboutPage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AboutPageFindUniqueArgs>(args: SelectSubset<T, AboutPageFindUniqueArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AboutPage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AboutPageFindUniqueOrThrowArgs} args - Arguments to find a AboutPage
     * @example
     * // Get one AboutPage
     * const aboutPage = await prisma.aboutPage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AboutPageFindUniqueOrThrowArgs>(args: SelectSubset<T, AboutPageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AboutPage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageFindFirstArgs} args - Arguments to find a AboutPage
     * @example
     * // Get one AboutPage
     * const aboutPage = await prisma.aboutPage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AboutPageFindFirstArgs>(args?: SelectSubset<T, AboutPageFindFirstArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AboutPage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageFindFirstOrThrowArgs} args - Arguments to find a AboutPage
     * @example
     * // Get one AboutPage
     * const aboutPage = await prisma.aboutPage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AboutPageFindFirstOrThrowArgs>(args?: SelectSubset<T, AboutPageFindFirstOrThrowArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AboutPages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AboutPages
     * const aboutPages = await prisma.aboutPage.findMany()
     * 
     * // Get first 10 AboutPages
     * const aboutPages = await prisma.aboutPage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutPageWithIdOnly = await prisma.aboutPage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AboutPageFindManyArgs>(args?: SelectSubset<T, AboutPageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AboutPage.
     * @param {AboutPageCreateArgs} args - Arguments to create a AboutPage.
     * @example
     * // Create one AboutPage
     * const AboutPage = await prisma.aboutPage.create({
     *   data: {
     *     // ... data to create a AboutPage
     *   }
     * })
     * 
     */
    create<T extends AboutPageCreateArgs>(args: SelectSubset<T, AboutPageCreateArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AboutPages.
     * @param {AboutPageCreateManyArgs} args - Arguments to create many AboutPages.
     * @example
     * // Create many AboutPages
     * const aboutPage = await prisma.aboutPage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AboutPageCreateManyArgs>(args?: SelectSubset<T, AboutPageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AboutPages and returns the data saved in the database.
     * @param {AboutPageCreateManyAndReturnArgs} args - Arguments to create many AboutPages.
     * @example
     * // Create many AboutPages
     * const aboutPage = await prisma.aboutPage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AboutPages and only return the `id`
     * const aboutPageWithIdOnly = await prisma.aboutPage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AboutPageCreateManyAndReturnArgs>(args?: SelectSubset<T, AboutPageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AboutPage.
     * @param {AboutPageDeleteArgs} args - Arguments to delete one AboutPage.
     * @example
     * // Delete one AboutPage
     * const AboutPage = await prisma.aboutPage.delete({
     *   where: {
     *     // ... filter to delete one AboutPage
     *   }
     * })
     * 
     */
    delete<T extends AboutPageDeleteArgs>(args: SelectSubset<T, AboutPageDeleteArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AboutPage.
     * @param {AboutPageUpdateArgs} args - Arguments to update one AboutPage.
     * @example
     * // Update one AboutPage
     * const aboutPage = await prisma.aboutPage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AboutPageUpdateArgs>(args: SelectSubset<T, AboutPageUpdateArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AboutPages.
     * @param {AboutPageDeleteManyArgs} args - Arguments to filter AboutPages to delete.
     * @example
     * // Delete a few AboutPages
     * const { count } = await prisma.aboutPage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AboutPageDeleteManyArgs>(args?: SelectSubset<T, AboutPageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AboutPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AboutPages
     * const aboutPage = await prisma.aboutPage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AboutPageUpdateManyArgs>(args: SelectSubset<T, AboutPageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AboutPage.
     * @param {AboutPageUpsertArgs} args - Arguments to update or create a AboutPage.
     * @example
     * // Update or create a AboutPage
     * const aboutPage = await prisma.aboutPage.upsert({
     *   create: {
     *     // ... data to create a AboutPage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AboutPage we want to update
     *   }
     * })
     */
    upsert<T extends AboutPageUpsertArgs>(args: SelectSubset<T, AboutPageUpsertArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AboutPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageCountArgs} args - Arguments to filter AboutPages to count.
     * @example
     * // Count the number of AboutPages
     * const count = await prisma.aboutPage.count({
     *   where: {
     *     // ... the filter for the AboutPages we want to count
     *   }
     * })
    **/
    count<T extends AboutPageCountArgs>(
      args?: Subset<T, AboutPageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutPageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AboutPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutPageAggregateArgs>(args: Subset<T, AboutPageAggregateArgs>): Prisma.PrismaPromise<GetAboutPageAggregateType<T>>

    /**
     * Group by AboutPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutPageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutPageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutPageGroupByArgs['orderBy'] }
        : { orderBy?: AboutPageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutPageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AboutPage model
   */
  readonly fields: AboutPageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AboutPage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AboutPageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teamProfiles<T extends AboutPage$teamProfilesArgs<ExtArgs> = {}>(args?: Subset<T, AboutPage$teamProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AboutPage model
   */ 
  interface AboutPageFieldRefs {
    readonly id: FieldRef<"AboutPage", 'Int'>
    readonly heroImage: FieldRef<"AboutPage", 'String'>
    readonly story: FieldRef<"AboutPage", 'String'>
    readonly stats: FieldRef<"AboutPage", 'String'>
    readonly manufacturingExcellence: FieldRef<"AboutPage", 'String'>
    readonly updatedAt: FieldRef<"AboutPage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AboutPage findUnique
   */
  export type AboutPageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * Filter, which AboutPage to fetch.
     */
    where: AboutPageWhereUniqueInput
  }

  /**
   * AboutPage findUniqueOrThrow
   */
  export type AboutPageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * Filter, which AboutPage to fetch.
     */
    where: AboutPageWhereUniqueInput
  }

  /**
   * AboutPage findFirst
   */
  export type AboutPageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * Filter, which AboutPage to fetch.
     */
    where?: AboutPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutPages to fetch.
     */
    orderBy?: AboutPageOrderByWithRelationInput | AboutPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AboutPages.
     */
    cursor?: AboutPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AboutPages.
     */
    distinct?: AboutPageScalarFieldEnum | AboutPageScalarFieldEnum[]
  }

  /**
   * AboutPage findFirstOrThrow
   */
  export type AboutPageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * Filter, which AboutPage to fetch.
     */
    where?: AboutPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutPages to fetch.
     */
    orderBy?: AboutPageOrderByWithRelationInput | AboutPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AboutPages.
     */
    cursor?: AboutPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AboutPages.
     */
    distinct?: AboutPageScalarFieldEnum | AboutPageScalarFieldEnum[]
  }

  /**
   * AboutPage findMany
   */
  export type AboutPageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * Filter, which AboutPages to fetch.
     */
    where?: AboutPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutPages to fetch.
     */
    orderBy?: AboutPageOrderByWithRelationInput | AboutPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AboutPages.
     */
    cursor?: AboutPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutPages.
     */
    skip?: number
    distinct?: AboutPageScalarFieldEnum | AboutPageScalarFieldEnum[]
  }

  /**
   * AboutPage create
   */
  export type AboutPageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * The data needed to create a AboutPage.
     */
    data: XOR<AboutPageCreateInput, AboutPageUncheckedCreateInput>
  }

  /**
   * AboutPage createMany
   */
  export type AboutPageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AboutPages.
     */
    data: AboutPageCreateManyInput | AboutPageCreateManyInput[]
  }

  /**
   * AboutPage createManyAndReturn
   */
  export type AboutPageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AboutPages.
     */
    data: AboutPageCreateManyInput | AboutPageCreateManyInput[]
  }

  /**
   * AboutPage update
   */
  export type AboutPageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * The data needed to update a AboutPage.
     */
    data: XOR<AboutPageUpdateInput, AboutPageUncheckedUpdateInput>
    /**
     * Choose, which AboutPage to update.
     */
    where: AboutPageWhereUniqueInput
  }

  /**
   * AboutPage updateMany
   */
  export type AboutPageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AboutPages.
     */
    data: XOR<AboutPageUpdateManyMutationInput, AboutPageUncheckedUpdateManyInput>
    /**
     * Filter which AboutPages to update
     */
    where?: AboutPageWhereInput
  }

  /**
   * AboutPage upsert
   */
  export type AboutPageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * The filter to search for the AboutPage to update in case it exists.
     */
    where: AboutPageWhereUniqueInput
    /**
     * In case the AboutPage found by the `where` argument doesn't exist, create a new AboutPage with this data.
     */
    create: XOR<AboutPageCreateInput, AboutPageUncheckedCreateInput>
    /**
     * In case the AboutPage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutPageUpdateInput, AboutPageUncheckedUpdateInput>
  }

  /**
   * AboutPage delete
   */
  export type AboutPageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
    /**
     * Filter which AboutPage to delete.
     */
    where: AboutPageWhereUniqueInput
  }

  /**
   * AboutPage deleteMany
   */
  export type AboutPageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutPages to delete
     */
    where?: AboutPageWhereInput
  }

  /**
   * AboutPage.teamProfiles
   */
  export type AboutPage$teamProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    where?: TeamProfileWhereInput
    orderBy?: TeamProfileOrderByWithRelationInput | TeamProfileOrderByWithRelationInput[]
    cursor?: TeamProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamProfileScalarFieldEnum | TeamProfileScalarFieldEnum[]
  }

  /**
   * AboutPage without action
   */
  export type AboutPageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutPage
     */
    select?: AboutPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutPageInclude<ExtArgs> | null
  }


  /**
   * Model TeamProfile
   */

  export type AggregateTeamProfile = {
    _count: TeamProfileCountAggregateOutputType | null
    _avg: TeamProfileAvgAggregateOutputType | null
    _sum: TeamProfileSumAggregateOutputType | null
    _min: TeamProfileMinAggregateOutputType | null
    _max: TeamProfileMaxAggregateOutputType | null
  }

  export type TeamProfileAvgAggregateOutputType = {
    id: number | null
    aboutPageId: number | null
  }

  export type TeamProfileSumAggregateOutputType = {
    id: number | null
    aboutPageId: number | null
  }

  export type TeamProfileMinAggregateOutputType = {
    id: number | null
    aboutPageId: number | null
    name: string | null
    imageUrl: string | null
  }

  export type TeamProfileMaxAggregateOutputType = {
    id: number | null
    aboutPageId: number | null
    name: string | null
    imageUrl: string | null
  }

  export type TeamProfileCountAggregateOutputType = {
    id: number
    aboutPageId: number
    name: number
    imageUrl: number
    _all: number
  }


  export type TeamProfileAvgAggregateInputType = {
    id?: true
    aboutPageId?: true
  }

  export type TeamProfileSumAggregateInputType = {
    id?: true
    aboutPageId?: true
  }

  export type TeamProfileMinAggregateInputType = {
    id?: true
    aboutPageId?: true
    name?: true
    imageUrl?: true
  }

  export type TeamProfileMaxAggregateInputType = {
    id?: true
    aboutPageId?: true
    name?: true
    imageUrl?: true
  }

  export type TeamProfileCountAggregateInputType = {
    id?: true
    aboutPageId?: true
    name?: true
    imageUrl?: true
    _all?: true
  }

  export type TeamProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamProfile to aggregate.
     */
    where?: TeamProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProfiles to fetch.
     */
    orderBy?: TeamProfileOrderByWithRelationInput | TeamProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamProfiles
    **/
    _count?: true | TeamProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamProfileMaxAggregateInputType
  }

  export type GetTeamProfileAggregateType<T extends TeamProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamProfile[P]>
      : GetScalarType<T[P], AggregateTeamProfile[P]>
  }




  export type TeamProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamProfileWhereInput
    orderBy?: TeamProfileOrderByWithAggregationInput | TeamProfileOrderByWithAggregationInput[]
    by: TeamProfileScalarFieldEnum[] | TeamProfileScalarFieldEnum
    having?: TeamProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamProfileCountAggregateInputType | true
    _avg?: TeamProfileAvgAggregateInputType
    _sum?: TeamProfileSumAggregateInputType
    _min?: TeamProfileMinAggregateInputType
    _max?: TeamProfileMaxAggregateInputType
  }

  export type TeamProfileGroupByOutputType = {
    id: number
    aboutPageId: number
    name: string
    imageUrl: string
    _count: TeamProfileCountAggregateOutputType | null
    _avg: TeamProfileAvgAggregateOutputType | null
    _sum: TeamProfileSumAggregateOutputType | null
    _min: TeamProfileMinAggregateOutputType | null
    _max: TeamProfileMaxAggregateOutputType | null
  }

  type GetTeamProfileGroupByPayload<T extends TeamProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamProfileGroupByOutputType[P]>
            : GetScalarType<T[P], TeamProfileGroupByOutputType[P]>
        }
      >
    >


  export type TeamProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aboutPageId?: boolean
    name?: boolean
    imageUrl?: boolean
    aboutPage?: boolean | AboutPageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamProfile"]>

  export type TeamProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    aboutPageId?: boolean
    name?: boolean
    imageUrl?: boolean
    aboutPage?: boolean | AboutPageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamProfile"]>

  export type TeamProfileSelectScalar = {
    id?: boolean
    aboutPageId?: boolean
    name?: boolean
    imageUrl?: boolean
  }

  export type TeamProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aboutPage?: boolean | AboutPageDefaultArgs<ExtArgs>
  }
  export type TeamProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aboutPage?: boolean | AboutPageDefaultArgs<ExtArgs>
  }

  export type $TeamProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamProfile"
    objects: {
      aboutPage: Prisma.$AboutPagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      aboutPageId: number
      name: string
      imageUrl: string
    }, ExtArgs["result"]["teamProfile"]>
    composites: {}
  }

  type TeamProfileGetPayload<S extends boolean | null | undefined | TeamProfileDefaultArgs> = $Result.GetResult<Prisma.$TeamProfilePayload, S>

  type TeamProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamProfileCountAggregateInputType | true
    }

  export interface TeamProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamProfile'], meta: { name: 'TeamProfile' } }
    /**
     * Find zero or one TeamProfile that matches the filter.
     * @param {TeamProfileFindUniqueArgs} args - Arguments to find a TeamProfile
     * @example
     * // Get one TeamProfile
     * const teamProfile = await prisma.teamProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamProfileFindUniqueArgs>(args: SelectSubset<T, TeamProfileFindUniqueArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeamProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamProfileFindUniqueOrThrowArgs} args - Arguments to find a TeamProfile
     * @example
     * // Get one TeamProfile
     * const teamProfile = await prisma.teamProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeamProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileFindFirstArgs} args - Arguments to find a TeamProfile
     * @example
     * // Get one TeamProfile
     * const teamProfile = await prisma.teamProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamProfileFindFirstArgs>(args?: SelectSubset<T, TeamProfileFindFirstArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeamProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileFindFirstOrThrowArgs} args - Arguments to find a TeamProfile
     * @example
     * // Get one TeamProfile
     * const teamProfile = await prisma.teamProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeamProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamProfiles
     * const teamProfiles = await prisma.teamProfile.findMany()
     * 
     * // Get first 10 TeamProfiles
     * const teamProfiles = await prisma.teamProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamProfileWithIdOnly = await prisma.teamProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamProfileFindManyArgs>(args?: SelectSubset<T, TeamProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeamProfile.
     * @param {TeamProfileCreateArgs} args - Arguments to create a TeamProfile.
     * @example
     * // Create one TeamProfile
     * const TeamProfile = await prisma.teamProfile.create({
     *   data: {
     *     // ... data to create a TeamProfile
     *   }
     * })
     * 
     */
    create<T extends TeamProfileCreateArgs>(args: SelectSubset<T, TeamProfileCreateArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeamProfiles.
     * @param {TeamProfileCreateManyArgs} args - Arguments to create many TeamProfiles.
     * @example
     * // Create many TeamProfiles
     * const teamProfile = await prisma.teamProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamProfileCreateManyArgs>(args?: SelectSubset<T, TeamProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamProfiles and returns the data saved in the database.
     * @param {TeamProfileCreateManyAndReturnArgs} args - Arguments to create many TeamProfiles.
     * @example
     * // Create many TeamProfiles
     * const teamProfile = await prisma.teamProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamProfiles and only return the `id`
     * const teamProfileWithIdOnly = await prisma.teamProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TeamProfile.
     * @param {TeamProfileDeleteArgs} args - Arguments to delete one TeamProfile.
     * @example
     * // Delete one TeamProfile
     * const TeamProfile = await prisma.teamProfile.delete({
     *   where: {
     *     // ... filter to delete one TeamProfile
     *   }
     * })
     * 
     */
    delete<T extends TeamProfileDeleteArgs>(args: SelectSubset<T, TeamProfileDeleteArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeamProfile.
     * @param {TeamProfileUpdateArgs} args - Arguments to update one TeamProfile.
     * @example
     * // Update one TeamProfile
     * const teamProfile = await prisma.teamProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamProfileUpdateArgs>(args: SelectSubset<T, TeamProfileUpdateArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeamProfiles.
     * @param {TeamProfileDeleteManyArgs} args - Arguments to filter TeamProfiles to delete.
     * @example
     * // Delete a few TeamProfiles
     * const { count } = await prisma.teamProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamProfileDeleteManyArgs>(args?: SelectSubset<T, TeamProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamProfiles
     * const teamProfile = await prisma.teamProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamProfileUpdateManyArgs>(args: SelectSubset<T, TeamProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamProfile.
     * @param {TeamProfileUpsertArgs} args - Arguments to update or create a TeamProfile.
     * @example
     * // Update or create a TeamProfile
     * const teamProfile = await prisma.teamProfile.upsert({
     *   create: {
     *     // ... data to create a TeamProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamProfile we want to update
     *   }
     * })
     */
    upsert<T extends TeamProfileUpsertArgs>(args: SelectSubset<T, TeamProfileUpsertArgs<ExtArgs>>): Prisma__TeamProfileClient<$Result.GetResult<Prisma.$TeamProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeamProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileCountArgs} args - Arguments to filter TeamProfiles to count.
     * @example
     * // Count the number of TeamProfiles
     * const count = await prisma.teamProfile.count({
     *   where: {
     *     // ... the filter for the TeamProfiles we want to count
     *   }
     * })
    **/
    count<T extends TeamProfileCountArgs>(
      args?: Subset<T, TeamProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamProfileAggregateArgs>(args: Subset<T, TeamProfileAggregateArgs>): Prisma.PrismaPromise<GetTeamProfileAggregateType<T>>

    /**
     * Group by TeamProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamProfileGroupByArgs['orderBy'] }
        : { orderBy?: TeamProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamProfile model
   */
  readonly fields: TeamProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aboutPage<T extends AboutPageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AboutPageDefaultArgs<ExtArgs>>): Prisma__AboutPageClient<$Result.GetResult<Prisma.$AboutPagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamProfile model
   */ 
  interface TeamProfileFieldRefs {
    readonly id: FieldRef<"TeamProfile", 'Int'>
    readonly aboutPageId: FieldRef<"TeamProfile", 'Int'>
    readonly name: FieldRef<"TeamProfile", 'String'>
    readonly imageUrl: FieldRef<"TeamProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeamProfile findUnique
   */
  export type TeamProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * Filter, which TeamProfile to fetch.
     */
    where: TeamProfileWhereUniqueInput
  }

  /**
   * TeamProfile findUniqueOrThrow
   */
  export type TeamProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * Filter, which TeamProfile to fetch.
     */
    where: TeamProfileWhereUniqueInput
  }

  /**
   * TeamProfile findFirst
   */
  export type TeamProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * Filter, which TeamProfile to fetch.
     */
    where?: TeamProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProfiles to fetch.
     */
    orderBy?: TeamProfileOrderByWithRelationInput | TeamProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamProfiles.
     */
    cursor?: TeamProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamProfiles.
     */
    distinct?: TeamProfileScalarFieldEnum | TeamProfileScalarFieldEnum[]
  }

  /**
   * TeamProfile findFirstOrThrow
   */
  export type TeamProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * Filter, which TeamProfile to fetch.
     */
    where?: TeamProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProfiles to fetch.
     */
    orderBy?: TeamProfileOrderByWithRelationInput | TeamProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamProfiles.
     */
    cursor?: TeamProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamProfiles.
     */
    distinct?: TeamProfileScalarFieldEnum | TeamProfileScalarFieldEnum[]
  }

  /**
   * TeamProfile findMany
   */
  export type TeamProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * Filter, which TeamProfiles to fetch.
     */
    where?: TeamProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProfiles to fetch.
     */
    orderBy?: TeamProfileOrderByWithRelationInput | TeamProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamProfiles.
     */
    cursor?: TeamProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProfiles.
     */
    skip?: number
    distinct?: TeamProfileScalarFieldEnum | TeamProfileScalarFieldEnum[]
  }

  /**
   * TeamProfile create
   */
  export type TeamProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamProfile.
     */
    data: XOR<TeamProfileCreateInput, TeamProfileUncheckedCreateInput>
  }

  /**
   * TeamProfile createMany
   */
  export type TeamProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamProfiles.
     */
    data: TeamProfileCreateManyInput | TeamProfileCreateManyInput[]
  }

  /**
   * TeamProfile createManyAndReturn
   */
  export type TeamProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TeamProfiles.
     */
    data: TeamProfileCreateManyInput | TeamProfileCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamProfile update
   */
  export type TeamProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamProfile.
     */
    data: XOR<TeamProfileUpdateInput, TeamProfileUncheckedUpdateInput>
    /**
     * Choose, which TeamProfile to update.
     */
    where: TeamProfileWhereUniqueInput
  }

  /**
   * TeamProfile updateMany
   */
  export type TeamProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamProfiles.
     */
    data: XOR<TeamProfileUpdateManyMutationInput, TeamProfileUncheckedUpdateManyInput>
    /**
     * Filter which TeamProfiles to update
     */
    where?: TeamProfileWhereInput
  }

  /**
   * TeamProfile upsert
   */
  export type TeamProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamProfile to update in case it exists.
     */
    where: TeamProfileWhereUniqueInput
    /**
     * In case the TeamProfile found by the `where` argument doesn't exist, create a new TeamProfile with this data.
     */
    create: XOR<TeamProfileCreateInput, TeamProfileUncheckedCreateInput>
    /**
     * In case the TeamProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamProfileUpdateInput, TeamProfileUncheckedUpdateInput>
  }

  /**
   * TeamProfile delete
   */
  export type TeamProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
    /**
     * Filter which TeamProfile to delete.
     */
    where: TeamProfileWhereUniqueInput
  }

  /**
   * TeamProfile deleteMany
   */
  export type TeamProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamProfiles to delete
     */
    where?: TeamProfileWhereInput
  }

  /**
   * TeamProfile without action
   */
  export type TeamProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamProfile
     */
    select?: TeamProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamProfileInclude<ExtArgs> | null
  }


  /**
   * Model DistributorPage
   */

  export type AggregateDistributorPage = {
    _count: DistributorPageCountAggregateOutputType | null
    _avg: DistributorPageAvgAggregateOutputType | null
    _sum: DistributorPageSumAggregateOutputType | null
    _min: DistributorPageMinAggregateOutputType | null
    _max: DistributorPageMaxAggregateOutputType | null
  }

  export type DistributorPageAvgAggregateOutputType = {
    id: number | null
  }

  export type DistributorPageSumAggregateOutputType = {
    id: number | null
  }

  export type DistributorPageMinAggregateOutputType = {
    id: number | null
    infoSections: string | null
    requirements: string | null
    supportServices: string | null
    updatedAt: Date | null
  }

  export type DistributorPageMaxAggregateOutputType = {
    id: number | null
    infoSections: string | null
    requirements: string | null
    supportServices: string | null
    updatedAt: Date | null
  }

  export type DistributorPageCountAggregateOutputType = {
    id: number
    infoSections: number
    requirements: number
    supportServices: number
    updatedAt: number
    _all: number
  }


  export type DistributorPageAvgAggregateInputType = {
    id?: true
  }

  export type DistributorPageSumAggregateInputType = {
    id?: true
  }

  export type DistributorPageMinAggregateInputType = {
    id?: true
    infoSections?: true
    requirements?: true
    supportServices?: true
    updatedAt?: true
  }

  export type DistributorPageMaxAggregateInputType = {
    id?: true
    infoSections?: true
    requirements?: true
    supportServices?: true
    updatedAt?: true
  }

  export type DistributorPageCountAggregateInputType = {
    id?: true
    infoSections?: true
    requirements?: true
    supportServices?: true
    updatedAt?: true
    _all?: true
  }

  export type DistributorPageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributorPage to aggregate.
     */
    where?: DistributorPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorPages to fetch.
     */
    orderBy?: DistributorPageOrderByWithRelationInput | DistributorPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistributorPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistributorPages
    **/
    _count?: true | DistributorPageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistributorPageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistributorPageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistributorPageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistributorPageMaxAggregateInputType
  }

  export type GetDistributorPageAggregateType<T extends DistributorPageAggregateArgs> = {
        [P in keyof T & keyof AggregateDistributorPage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistributorPage[P]>
      : GetScalarType<T[P], AggregateDistributorPage[P]>
  }




  export type DistributorPageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributorPageWhereInput
    orderBy?: DistributorPageOrderByWithAggregationInput | DistributorPageOrderByWithAggregationInput[]
    by: DistributorPageScalarFieldEnum[] | DistributorPageScalarFieldEnum
    having?: DistributorPageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistributorPageCountAggregateInputType | true
    _avg?: DistributorPageAvgAggregateInputType
    _sum?: DistributorPageSumAggregateInputType
    _min?: DistributorPageMinAggregateInputType
    _max?: DistributorPageMaxAggregateInputType
  }

  export type DistributorPageGroupByOutputType = {
    id: number
    infoSections: string
    requirements: string
    supportServices: string
    updatedAt: Date
    _count: DistributorPageCountAggregateOutputType | null
    _avg: DistributorPageAvgAggregateOutputType | null
    _sum: DistributorPageSumAggregateOutputType | null
    _min: DistributorPageMinAggregateOutputType | null
    _max: DistributorPageMaxAggregateOutputType | null
  }

  type GetDistributorPageGroupByPayload<T extends DistributorPageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistributorPageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistributorPageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributorPageGroupByOutputType[P]>
            : GetScalarType<T[P], DistributorPageGroupByOutputType[P]>
        }
      >
    >


  export type DistributorPageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    infoSections?: boolean
    requirements?: boolean
    supportServices?: boolean
    updatedAt?: boolean
    stories?: boolean | DistributorPage$storiesArgs<ExtArgs>
    _count?: boolean | DistributorPageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributorPage"]>

  export type DistributorPageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    infoSections?: boolean
    requirements?: boolean
    supportServices?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["distributorPage"]>

  export type DistributorPageSelectScalar = {
    id?: boolean
    infoSections?: boolean
    requirements?: boolean
    supportServices?: boolean
    updatedAt?: boolean
  }

  export type DistributorPageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stories?: boolean | DistributorPage$storiesArgs<ExtArgs>
    _count?: boolean | DistributorPageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DistributorPageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DistributorPagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DistributorPage"
    objects: {
      stories: Prisma.$DistributorStoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      infoSections: string
      requirements: string
      supportServices: string
      updatedAt: Date
    }, ExtArgs["result"]["distributorPage"]>
    composites: {}
  }

  type DistributorPageGetPayload<S extends boolean | null | undefined | DistributorPageDefaultArgs> = $Result.GetResult<Prisma.$DistributorPagePayload, S>

  type DistributorPageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DistributorPageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DistributorPageCountAggregateInputType | true
    }

  export interface DistributorPageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DistributorPage'], meta: { name: 'DistributorPage' } }
    /**
     * Find zero or one DistributorPage that matches the filter.
     * @param {DistributorPageFindUniqueArgs} args - Arguments to find a DistributorPage
     * @example
     * // Get one DistributorPage
     * const distributorPage = await prisma.distributorPage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistributorPageFindUniqueArgs>(args: SelectSubset<T, DistributorPageFindUniqueArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DistributorPage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DistributorPageFindUniqueOrThrowArgs} args - Arguments to find a DistributorPage
     * @example
     * // Get one DistributorPage
     * const distributorPage = await prisma.distributorPage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistributorPageFindUniqueOrThrowArgs>(args: SelectSubset<T, DistributorPageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DistributorPage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageFindFirstArgs} args - Arguments to find a DistributorPage
     * @example
     * // Get one DistributorPage
     * const distributorPage = await prisma.distributorPage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistributorPageFindFirstArgs>(args?: SelectSubset<T, DistributorPageFindFirstArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DistributorPage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageFindFirstOrThrowArgs} args - Arguments to find a DistributorPage
     * @example
     * // Get one DistributorPage
     * const distributorPage = await prisma.distributorPage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistributorPageFindFirstOrThrowArgs>(args?: SelectSubset<T, DistributorPageFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DistributorPages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistributorPages
     * const distributorPages = await prisma.distributorPage.findMany()
     * 
     * // Get first 10 DistributorPages
     * const distributorPages = await prisma.distributorPage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distributorPageWithIdOnly = await prisma.distributorPage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DistributorPageFindManyArgs>(args?: SelectSubset<T, DistributorPageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DistributorPage.
     * @param {DistributorPageCreateArgs} args - Arguments to create a DistributorPage.
     * @example
     * // Create one DistributorPage
     * const DistributorPage = await prisma.distributorPage.create({
     *   data: {
     *     // ... data to create a DistributorPage
     *   }
     * })
     * 
     */
    create<T extends DistributorPageCreateArgs>(args: SelectSubset<T, DistributorPageCreateArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DistributorPages.
     * @param {DistributorPageCreateManyArgs} args - Arguments to create many DistributorPages.
     * @example
     * // Create many DistributorPages
     * const distributorPage = await prisma.distributorPage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistributorPageCreateManyArgs>(args?: SelectSubset<T, DistributorPageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DistributorPages and returns the data saved in the database.
     * @param {DistributorPageCreateManyAndReturnArgs} args - Arguments to create many DistributorPages.
     * @example
     * // Create many DistributorPages
     * const distributorPage = await prisma.distributorPage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DistributorPages and only return the `id`
     * const distributorPageWithIdOnly = await prisma.distributorPage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistributorPageCreateManyAndReturnArgs>(args?: SelectSubset<T, DistributorPageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DistributorPage.
     * @param {DistributorPageDeleteArgs} args - Arguments to delete one DistributorPage.
     * @example
     * // Delete one DistributorPage
     * const DistributorPage = await prisma.distributorPage.delete({
     *   where: {
     *     // ... filter to delete one DistributorPage
     *   }
     * })
     * 
     */
    delete<T extends DistributorPageDeleteArgs>(args: SelectSubset<T, DistributorPageDeleteArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DistributorPage.
     * @param {DistributorPageUpdateArgs} args - Arguments to update one DistributorPage.
     * @example
     * // Update one DistributorPage
     * const distributorPage = await prisma.distributorPage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistributorPageUpdateArgs>(args: SelectSubset<T, DistributorPageUpdateArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DistributorPages.
     * @param {DistributorPageDeleteManyArgs} args - Arguments to filter DistributorPages to delete.
     * @example
     * // Delete a few DistributorPages
     * const { count } = await prisma.distributorPage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistributorPageDeleteManyArgs>(args?: SelectSubset<T, DistributorPageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributorPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistributorPages
     * const distributorPage = await prisma.distributorPage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistributorPageUpdateManyArgs>(args: SelectSubset<T, DistributorPageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DistributorPage.
     * @param {DistributorPageUpsertArgs} args - Arguments to update or create a DistributorPage.
     * @example
     * // Update or create a DistributorPage
     * const distributorPage = await prisma.distributorPage.upsert({
     *   create: {
     *     // ... data to create a DistributorPage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistributorPage we want to update
     *   }
     * })
     */
    upsert<T extends DistributorPageUpsertArgs>(args: SelectSubset<T, DistributorPageUpsertArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DistributorPages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageCountArgs} args - Arguments to filter DistributorPages to count.
     * @example
     * // Count the number of DistributorPages
     * const count = await prisma.distributorPage.count({
     *   where: {
     *     // ... the filter for the DistributorPages we want to count
     *   }
     * })
    **/
    count<T extends DistributorPageCountArgs>(
      args?: Subset<T, DistributorPageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistributorPageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistributorPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistributorPageAggregateArgs>(args: Subset<T, DistributorPageAggregateArgs>): Prisma.PrismaPromise<GetDistributorPageAggregateType<T>>

    /**
     * Group by DistributorPage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorPageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistributorPageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributorPageGroupByArgs['orderBy'] }
        : { orderBy?: DistributorPageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistributorPageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistributorPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DistributorPage model
   */
  readonly fields: DistributorPageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistributorPage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistributorPageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stories<T extends DistributorPage$storiesArgs<ExtArgs> = {}>(args?: Subset<T, DistributorPage$storiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DistributorPage model
   */ 
  interface DistributorPageFieldRefs {
    readonly id: FieldRef<"DistributorPage", 'Int'>
    readonly infoSections: FieldRef<"DistributorPage", 'String'>
    readonly requirements: FieldRef<"DistributorPage", 'String'>
    readonly supportServices: FieldRef<"DistributorPage", 'String'>
    readonly updatedAt: FieldRef<"DistributorPage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DistributorPage findUnique
   */
  export type DistributorPageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * Filter, which DistributorPage to fetch.
     */
    where: DistributorPageWhereUniqueInput
  }

  /**
   * DistributorPage findUniqueOrThrow
   */
  export type DistributorPageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * Filter, which DistributorPage to fetch.
     */
    where: DistributorPageWhereUniqueInput
  }

  /**
   * DistributorPage findFirst
   */
  export type DistributorPageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * Filter, which DistributorPage to fetch.
     */
    where?: DistributorPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorPages to fetch.
     */
    orderBy?: DistributorPageOrderByWithRelationInput | DistributorPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributorPages.
     */
    cursor?: DistributorPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributorPages.
     */
    distinct?: DistributorPageScalarFieldEnum | DistributorPageScalarFieldEnum[]
  }

  /**
   * DistributorPage findFirstOrThrow
   */
  export type DistributorPageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * Filter, which DistributorPage to fetch.
     */
    where?: DistributorPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorPages to fetch.
     */
    orderBy?: DistributorPageOrderByWithRelationInput | DistributorPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributorPages.
     */
    cursor?: DistributorPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorPages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributorPages.
     */
    distinct?: DistributorPageScalarFieldEnum | DistributorPageScalarFieldEnum[]
  }

  /**
   * DistributorPage findMany
   */
  export type DistributorPageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * Filter, which DistributorPages to fetch.
     */
    where?: DistributorPageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorPages to fetch.
     */
    orderBy?: DistributorPageOrderByWithRelationInput | DistributorPageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistributorPages.
     */
    cursor?: DistributorPageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorPages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorPages.
     */
    skip?: number
    distinct?: DistributorPageScalarFieldEnum | DistributorPageScalarFieldEnum[]
  }

  /**
   * DistributorPage create
   */
  export type DistributorPageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * The data needed to create a DistributorPage.
     */
    data: XOR<DistributorPageCreateInput, DistributorPageUncheckedCreateInput>
  }

  /**
   * DistributorPage createMany
   */
  export type DistributorPageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DistributorPages.
     */
    data: DistributorPageCreateManyInput | DistributorPageCreateManyInput[]
  }

  /**
   * DistributorPage createManyAndReturn
   */
  export type DistributorPageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DistributorPages.
     */
    data: DistributorPageCreateManyInput | DistributorPageCreateManyInput[]
  }

  /**
   * DistributorPage update
   */
  export type DistributorPageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * The data needed to update a DistributorPage.
     */
    data: XOR<DistributorPageUpdateInput, DistributorPageUncheckedUpdateInput>
    /**
     * Choose, which DistributorPage to update.
     */
    where: DistributorPageWhereUniqueInput
  }

  /**
   * DistributorPage updateMany
   */
  export type DistributorPageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DistributorPages.
     */
    data: XOR<DistributorPageUpdateManyMutationInput, DistributorPageUncheckedUpdateManyInput>
    /**
     * Filter which DistributorPages to update
     */
    where?: DistributorPageWhereInput
  }

  /**
   * DistributorPage upsert
   */
  export type DistributorPageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * The filter to search for the DistributorPage to update in case it exists.
     */
    where: DistributorPageWhereUniqueInput
    /**
     * In case the DistributorPage found by the `where` argument doesn't exist, create a new DistributorPage with this data.
     */
    create: XOR<DistributorPageCreateInput, DistributorPageUncheckedCreateInput>
    /**
     * In case the DistributorPage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistributorPageUpdateInput, DistributorPageUncheckedUpdateInput>
  }

  /**
   * DistributorPage delete
   */
  export type DistributorPageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
    /**
     * Filter which DistributorPage to delete.
     */
    where: DistributorPageWhereUniqueInput
  }

  /**
   * DistributorPage deleteMany
   */
  export type DistributorPageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributorPages to delete
     */
    where?: DistributorPageWhereInput
  }

  /**
   * DistributorPage.stories
   */
  export type DistributorPage$storiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    where?: DistributorStoryWhereInput
    orderBy?: DistributorStoryOrderByWithRelationInput | DistributorStoryOrderByWithRelationInput[]
    cursor?: DistributorStoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DistributorStoryScalarFieldEnum | DistributorStoryScalarFieldEnum[]
  }

  /**
   * DistributorPage without action
   */
  export type DistributorPageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorPage
     */
    select?: DistributorPageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorPageInclude<ExtArgs> | null
  }


  /**
   * Model DistributorStory
   */

  export type AggregateDistributorStory = {
    _count: DistributorStoryCountAggregateOutputType | null
    _avg: DistributorStoryAvgAggregateOutputType | null
    _sum: DistributorStorySumAggregateOutputType | null
    _min: DistributorStoryMinAggregateOutputType | null
    _max: DistributorStoryMaxAggregateOutputType | null
  }

  export type DistributorStoryAvgAggregateOutputType = {
    id: number | null
    distributorPageId: number | null
  }

  export type DistributorStorySumAggregateOutputType = {
    id: number | null
    distributorPageId: number | null
  }

  export type DistributorStoryMinAggregateOutputType = {
    id: number | null
    distributorPageId: number | null
    title: string | null
    content: string | null
    imageUrl: string | null
  }

  export type DistributorStoryMaxAggregateOutputType = {
    id: number | null
    distributorPageId: number | null
    title: string | null
    content: string | null
    imageUrl: string | null
  }

  export type DistributorStoryCountAggregateOutputType = {
    id: number
    distributorPageId: number
    title: number
    content: number
    imageUrl: number
    _all: number
  }


  export type DistributorStoryAvgAggregateInputType = {
    id?: true
    distributorPageId?: true
  }

  export type DistributorStorySumAggregateInputType = {
    id?: true
    distributorPageId?: true
  }

  export type DistributorStoryMinAggregateInputType = {
    id?: true
    distributorPageId?: true
    title?: true
    content?: true
    imageUrl?: true
  }

  export type DistributorStoryMaxAggregateInputType = {
    id?: true
    distributorPageId?: true
    title?: true
    content?: true
    imageUrl?: true
  }

  export type DistributorStoryCountAggregateInputType = {
    id?: true
    distributorPageId?: true
    title?: true
    content?: true
    imageUrl?: true
    _all?: true
  }

  export type DistributorStoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributorStory to aggregate.
     */
    where?: DistributorStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorStories to fetch.
     */
    orderBy?: DistributorStoryOrderByWithRelationInput | DistributorStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistributorStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistributorStories
    **/
    _count?: true | DistributorStoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DistributorStoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DistributorStorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistributorStoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistributorStoryMaxAggregateInputType
  }

  export type GetDistributorStoryAggregateType<T extends DistributorStoryAggregateArgs> = {
        [P in keyof T & keyof AggregateDistributorStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistributorStory[P]>
      : GetScalarType<T[P], AggregateDistributorStory[P]>
  }




  export type DistributorStoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributorStoryWhereInput
    orderBy?: DistributorStoryOrderByWithAggregationInput | DistributorStoryOrderByWithAggregationInput[]
    by: DistributorStoryScalarFieldEnum[] | DistributorStoryScalarFieldEnum
    having?: DistributorStoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistributorStoryCountAggregateInputType | true
    _avg?: DistributorStoryAvgAggregateInputType
    _sum?: DistributorStorySumAggregateInputType
    _min?: DistributorStoryMinAggregateInputType
    _max?: DistributorStoryMaxAggregateInputType
  }

  export type DistributorStoryGroupByOutputType = {
    id: number
    distributorPageId: number
    title: string
    content: string
    imageUrl: string
    _count: DistributorStoryCountAggregateOutputType | null
    _avg: DistributorStoryAvgAggregateOutputType | null
    _sum: DistributorStorySumAggregateOutputType | null
    _min: DistributorStoryMinAggregateOutputType | null
    _max: DistributorStoryMaxAggregateOutputType | null
  }

  type GetDistributorStoryGroupByPayload<T extends DistributorStoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistributorStoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistributorStoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributorStoryGroupByOutputType[P]>
            : GetScalarType<T[P], DistributorStoryGroupByOutputType[P]>
        }
      >
    >


  export type DistributorStorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributorPageId?: boolean
    title?: boolean
    content?: boolean
    imageUrl?: boolean
    distributorPage?: boolean | DistributorPageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributorStory"]>

  export type DistributorStorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    distributorPageId?: boolean
    title?: boolean
    content?: boolean
    imageUrl?: boolean
    distributorPage?: boolean | DistributorPageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["distributorStory"]>

  export type DistributorStorySelectScalar = {
    id?: boolean
    distributorPageId?: boolean
    title?: boolean
    content?: boolean
    imageUrl?: boolean
  }

  export type DistributorStoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributorPage?: boolean | DistributorPageDefaultArgs<ExtArgs>
  }
  export type DistributorStoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    distributorPage?: boolean | DistributorPageDefaultArgs<ExtArgs>
  }

  export type $DistributorStoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DistributorStory"
    objects: {
      distributorPage: Prisma.$DistributorPagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      distributorPageId: number
      title: string
      content: string
      imageUrl: string
    }, ExtArgs["result"]["distributorStory"]>
    composites: {}
  }

  type DistributorStoryGetPayload<S extends boolean | null | undefined | DistributorStoryDefaultArgs> = $Result.GetResult<Prisma.$DistributorStoryPayload, S>

  type DistributorStoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DistributorStoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DistributorStoryCountAggregateInputType | true
    }

  export interface DistributorStoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DistributorStory'], meta: { name: 'DistributorStory' } }
    /**
     * Find zero or one DistributorStory that matches the filter.
     * @param {DistributorStoryFindUniqueArgs} args - Arguments to find a DistributorStory
     * @example
     * // Get one DistributorStory
     * const distributorStory = await prisma.distributorStory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistributorStoryFindUniqueArgs>(args: SelectSubset<T, DistributorStoryFindUniqueArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DistributorStory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DistributorStoryFindUniqueOrThrowArgs} args - Arguments to find a DistributorStory
     * @example
     * // Get one DistributorStory
     * const distributorStory = await prisma.distributorStory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistributorStoryFindUniqueOrThrowArgs>(args: SelectSubset<T, DistributorStoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DistributorStory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryFindFirstArgs} args - Arguments to find a DistributorStory
     * @example
     * // Get one DistributorStory
     * const distributorStory = await prisma.distributorStory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistributorStoryFindFirstArgs>(args?: SelectSubset<T, DistributorStoryFindFirstArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DistributorStory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryFindFirstOrThrowArgs} args - Arguments to find a DistributorStory
     * @example
     * // Get one DistributorStory
     * const distributorStory = await prisma.distributorStory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistributorStoryFindFirstOrThrowArgs>(args?: SelectSubset<T, DistributorStoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DistributorStories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistributorStories
     * const distributorStories = await prisma.distributorStory.findMany()
     * 
     * // Get first 10 DistributorStories
     * const distributorStories = await prisma.distributorStory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distributorStoryWithIdOnly = await prisma.distributorStory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DistributorStoryFindManyArgs>(args?: SelectSubset<T, DistributorStoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DistributorStory.
     * @param {DistributorStoryCreateArgs} args - Arguments to create a DistributorStory.
     * @example
     * // Create one DistributorStory
     * const DistributorStory = await prisma.distributorStory.create({
     *   data: {
     *     // ... data to create a DistributorStory
     *   }
     * })
     * 
     */
    create<T extends DistributorStoryCreateArgs>(args: SelectSubset<T, DistributorStoryCreateArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DistributorStories.
     * @param {DistributorStoryCreateManyArgs} args - Arguments to create many DistributorStories.
     * @example
     * // Create many DistributorStories
     * const distributorStory = await prisma.distributorStory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistributorStoryCreateManyArgs>(args?: SelectSubset<T, DistributorStoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DistributorStories and returns the data saved in the database.
     * @param {DistributorStoryCreateManyAndReturnArgs} args - Arguments to create many DistributorStories.
     * @example
     * // Create many DistributorStories
     * const distributorStory = await prisma.distributorStory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DistributorStories and only return the `id`
     * const distributorStoryWithIdOnly = await prisma.distributorStory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistributorStoryCreateManyAndReturnArgs>(args?: SelectSubset<T, DistributorStoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DistributorStory.
     * @param {DistributorStoryDeleteArgs} args - Arguments to delete one DistributorStory.
     * @example
     * // Delete one DistributorStory
     * const DistributorStory = await prisma.distributorStory.delete({
     *   where: {
     *     // ... filter to delete one DistributorStory
     *   }
     * })
     * 
     */
    delete<T extends DistributorStoryDeleteArgs>(args: SelectSubset<T, DistributorStoryDeleteArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DistributorStory.
     * @param {DistributorStoryUpdateArgs} args - Arguments to update one DistributorStory.
     * @example
     * // Update one DistributorStory
     * const distributorStory = await prisma.distributorStory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistributorStoryUpdateArgs>(args: SelectSubset<T, DistributorStoryUpdateArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DistributorStories.
     * @param {DistributorStoryDeleteManyArgs} args - Arguments to filter DistributorStories to delete.
     * @example
     * // Delete a few DistributorStories
     * const { count } = await prisma.distributorStory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistributorStoryDeleteManyArgs>(args?: SelectSubset<T, DistributorStoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributorStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistributorStories
     * const distributorStory = await prisma.distributorStory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistributorStoryUpdateManyArgs>(args: SelectSubset<T, DistributorStoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DistributorStory.
     * @param {DistributorStoryUpsertArgs} args - Arguments to update or create a DistributorStory.
     * @example
     * // Update or create a DistributorStory
     * const distributorStory = await prisma.distributorStory.upsert({
     *   create: {
     *     // ... data to create a DistributorStory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistributorStory we want to update
     *   }
     * })
     */
    upsert<T extends DistributorStoryUpsertArgs>(args: SelectSubset<T, DistributorStoryUpsertArgs<ExtArgs>>): Prisma__DistributorStoryClient<$Result.GetResult<Prisma.$DistributorStoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DistributorStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryCountArgs} args - Arguments to filter DistributorStories to count.
     * @example
     * // Count the number of DistributorStories
     * const count = await prisma.distributorStory.count({
     *   where: {
     *     // ... the filter for the DistributorStories we want to count
     *   }
     * })
    **/
    count<T extends DistributorStoryCountArgs>(
      args?: Subset<T, DistributorStoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistributorStoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistributorStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistributorStoryAggregateArgs>(args: Subset<T, DistributorStoryAggregateArgs>): Prisma.PrismaPromise<GetDistributorStoryAggregateType<T>>

    /**
     * Group by DistributorStory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributorStoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistributorStoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributorStoryGroupByArgs['orderBy'] }
        : { orderBy?: DistributorStoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistributorStoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistributorStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DistributorStory model
   */
  readonly fields: DistributorStoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistributorStory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistributorStoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    distributorPage<T extends DistributorPageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DistributorPageDefaultArgs<ExtArgs>>): Prisma__DistributorPageClient<$Result.GetResult<Prisma.$DistributorPagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DistributorStory model
   */ 
  interface DistributorStoryFieldRefs {
    readonly id: FieldRef<"DistributorStory", 'Int'>
    readonly distributorPageId: FieldRef<"DistributorStory", 'Int'>
    readonly title: FieldRef<"DistributorStory", 'String'>
    readonly content: FieldRef<"DistributorStory", 'String'>
    readonly imageUrl: FieldRef<"DistributorStory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DistributorStory findUnique
   */
  export type DistributorStoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * Filter, which DistributorStory to fetch.
     */
    where: DistributorStoryWhereUniqueInput
  }

  /**
   * DistributorStory findUniqueOrThrow
   */
  export type DistributorStoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * Filter, which DistributorStory to fetch.
     */
    where: DistributorStoryWhereUniqueInput
  }

  /**
   * DistributorStory findFirst
   */
  export type DistributorStoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * Filter, which DistributorStory to fetch.
     */
    where?: DistributorStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorStories to fetch.
     */
    orderBy?: DistributorStoryOrderByWithRelationInput | DistributorStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributorStories.
     */
    cursor?: DistributorStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributorStories.
     */
    distinct?: DistributorStoryScalarFieldEnum | DistributorStoryScalarFieldEnum[]
  }

  /**
   * DistributorStory findFirstOrThrow
   */
  export type DistributorStoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * Filter, which DistributorStory to fetch.
     */
    where?: DistributorStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorStories to fetch.
     */
    orderBy?: DistributorStoryOrderByWithRelationInput | DistributorStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributorStories.
     */
    cursor?: DistributorStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributorStories.
     */
    distinct?: DistributorStoryScalarFieldEnum | DistributorStoryScalarFieldEnum[]
  }

  /**
   * DistributorStory findMany
   */
  export type DistributorStoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * Filter, which DistributorStories to fetch.
     */
    where?: DistributorStoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributorStories to fetch.
     */
    orderBy?: DistributorStoryOrderByWithRelationInput | DistributorStoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistributorStories.
     */
    cursor?: DistributorStoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributorStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributorStories.
     */
    skip?: number
    distinct?: DistributorStoryScalarFieldEnum | DistributorStoryScalarFieldEnum[]
  }

  /**
   * DistributorStory create
   */
  export type DistributorStoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * The data needed to create a DistributorStory.
     */
    data: XOR<DistributorStoryCreateInput, DistributorStoryUncheckedCreateInput>
  }

  /**
   * DistributorStory createMany
   */
  export type DistributorStoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DistributorStories.
     */
    data: DistributorStoryCreateManyInput | DistributorStoryCreateManyInput[]
  }

  /**
   * DistributorStory createManyAndReturn
   */
  export type DistributorStoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DistributorStories.
     */
    data: DistributorStoryCreateManyInput | DistributorStoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DistributorStory update
   */
  export type DistributorStoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * The data needed to update a DistributorStory.
     */
    data: XOR<DistributorStoryUpdateInput, DistributorStoryUncheckedUpdateInput>
    /**
     * Choose, which DistributorStory to update.
     */
    where: DistributorStoryWhereUniqueInput
  }

  /**
   * DistributorStory updateMany
   */
  export type DistributorStoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DistributorStories.
     */
    data: XOR<DistributorStoryUpdateManyMutationInput, DistributorStoryUncheckedUpdateManyInput>
    /**
     * Filter which DistributorStories to update
     */
    where?: DistributorStoryWhereInput
  }

  /**
   * DistributorStory upsert
   */
  export type DistributorStoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * The filter to search for the DistributorStory to update in case it exists.
     */
    where: DistributorStoryWhereUniqueInput
    /**
     * In case the DistributorStory found by the `where` argument doesn't exist, create a new DistributorStory with this data.
     */
    create: XOR<DistributorStoryCreateInput, DistributorStoryUncheckedCreateInput>
    /**
     * In case the DistributorStory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistributorStoryUpdateInput, DistributorStoryUncheckedUpdateInput>
  }

  /**
   * DistributorStory delete
   */
  export type DistributorStoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
    /**
     * Filter which DistributorStory to delete.
     */
    where: DistributorStoryWhereUniqueInput
  }

  /**
   * DistributorStory deleteMany
   */
  export type DistributorStoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributorStories to delete
     */
    where?: DistributorStoryWhereInput
  }

  /**
   * DistributorStory without action
   */
  export type DistributorStoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributorStory
     */
    select?: DistributorStorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DistributorStoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ContactSettingsScalarFieldEnum: {
    id: 'id',
    phoneNumber: 'phoneNumber',
    whatsappNumber: 'whatsappNumber',
    emailAddress: 'emailAddress',
    updatedAt: 'updatedAt'
  };

  export type ContactSettingsScalarFieldEnum = (typeof ContactSettingsScalarFieldEnum)[keyof typeof ContactSettingsScalarFieldEnum]


  export const CatalogFileScalarFieldEnum: {
    id: 'id',
    fileUrl: 'fileUrl',
    fileName: 'fileName',
    version: 'version',
    uploadedAt: 'uploadedAt',
    isCurrent: 'isCurrent'
  };

  export type CatalogFileScalarFieldEnum = (typeof CatalogFileScalarFieldEnum)[keyof typeof CatalogFileScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    imageUrl: 'imageUrl',
    category: 'category',
    price: 'price',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const StoreLocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    lat: 'lat',
    lng: 'lng',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StoreLocationScalarFieldEnum = (typeof StoreLocationScalarFieldEnum)[keyof typeof StoreLocationScalarFieldEnum]


  export const AboutPageScalarFieldEnum: {
    id: 'id',
    heroImage: 'heroImage',
    story: 'story',
    stats: 'stats',
    manufacturingExcellence: 'manufacturingExcellence',
    updatedAt: 'updatedAt'
  };

  export type AboutPageScalarFieldEnum = (typeof AboutPageScalarFieldEnum)[keyof typeof AboutPageScalarFieldEnum]


  export const TeamProfileScalarFieldEnum: {
    id: 'id',
    aboutPageId: 'aboutPageId',
    name: 'name',
    imageUrl: 'imageUrl'
  };

  export type TeamProfileScalarFieldEnum = (typeof TeamProfileScalarFieldEnum)[keyof typeof TeamProfileScalarFieldEnum]


  export const DistributorPageScalarFieldEnum: {
    id: 'id',
    infoSections: 'infoSections',
    requirements: 'requirements',
    supportServices: 'supportServices',
    updatedAt: 'updatedAt'
  };

  export type DistributorPageScalarFieldEnum = (typeof DistributorPageScalarFieldEnum)[keyof typeof DistributorPageScalarFieldEnum]


  export const DistributorStoryScalarFieldEnum: {
    id: 'id',
    distributorPageId: 'distributorPageId',
    title: 'title',
    content: 'content',
    imageUrl: 'imageUrl'
  };

  export type DistributorStoryScalarFieldEnum = (typeof DistributorStoryScalarFieldEnum)[keyof typeof DistributorStoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ContactSettingsWhereInput = {
    AND?: ContactSettingsWhereInput | ContactSettingsWhereInput[]
    OR?: ContactSettingsWhereInput[]
    NOT?: ContactSettingsWhereInput | ContactSettingsWhereInput[]
    id?: IntFilter<"ContactSettings"> | number
    phoneNumber?: StringFilter<"ContactSettings"> | string
    whatsappNumber?: StringFilter<"ContactSettings"> | string
    emailAddress?: StringFilter<"ContactSettings"> | string
    updatedAt?: DateTimeFilter<"ContactSettings"> | Date | string
  }

  export type ContactSettingsOrderByWithRelationInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    whatsappNumber?: SortOrder
    emailAddress?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactSettingsWhereInput | ContactSettingsWhereInput[]
    OR?: ContactSettingsWhereInput[]
    NOT?: ContactSettingsWhereInput | ContactSettingsWhereInput[]
    phoneNumber?: StringFilter<"ContactSettings"> | string
    whatsappNumber?: StringFilter<"ContactSettings"> | string
    emailAddress?: StringFilter<"ContactSettings"> | string
    updatedAt?: DateTimeFilter<"ContactSettings"> | Date | string
  }, "id">

  export type ContactSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    whatsappNumber?: SortOrder
    emailAddress?: SortOrder
    updatedAt?: SortOrder
    _count?: ContactSettingsCountOrderByAggregateInput
    _avg?: ContactSettingsAvgOrderByAggregateInput
    _max?: ContactSettingsMaxOrderByAggregateInput
    _min?: ContactSettingsMinOrderByAggregateInput
    _sum?: ContactSettingsSumOrderByAggregateInput
  }

  export type ContactSettingsScalarWhereWithAggregatesInput = {
    AND?: ContactSettingsScalarWhereWithAggregatesInput | ContactSettingsScalarWhereWithAggregatesInput[]
    OR?: ContactSettingsScalarWhereWithAggregatesInput[]
    NOT?: ContactSettingsScalarWhereWithAggregatesInput | ContactSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactSettings"> | number
    phoneNumber?: StringWithAggregatesFilter<"ContactSettings"> | string
    whatsappNumber?: StringWithAggregatesFilter<"ContactSettings"> | string
    emailAddress?: StringWithAggregatesFilter<"ContactSettings"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContactSettings"> | Date | string
  }

  export type CatalogFileWhereInput = {
    AND?: CatalogFileWhereInput | CatalogFileWhereInput[]
    OR?: CatalogFileWhereInput[]
    NOT?: CatalogFileWhereInput | CatalogFileWhereInput[]
    id?: IntFilter<"CatalogFile"> | number
    fileUrl?: StringFilter<"CatalogFile"> | string
    fileName?: StringFilter<"CatalogFile"> | string
    version?: StringNullableFilter<"CatalogFile"> | string | null
    uploadedAt?: DateTimeFilter<"CatalogFile"> | Date | string
    isCurrent?: BoolFilter<"CatalogFile"> | boolean
  }

  export type CatalogFileOrderByWithRelationInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    version?: SortOrderInput | SortOrder
    uploadedAt?: SortOrder
    isCurrent?: SortOrder
  }

  export type CatalogFileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CatalogFileWhereInput | CatalogFileWhereInput[]
    OR?: CatalogFileWhereInput[]
    NOT?: CatalogFileWhereInput | CatalogFileWhereInput[]
    fileUrl?: StringFilter<"CatalogFile"> | string
    fileName?: StringFilter<"CatalogFile"> | string
    version?: StringNullableFilter<"CatalogFile"> | string | null
    uploadedAt?: DateTimeFilter<"CatalogFile"> | Date | string
    isCurrent?: BoolFilter<"CatalogFile"> | boolean
  }, "id">

  export type CatalogFileOrderByWithAggregationInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    version?: SortOrderInput | SortOrder
    uploadedAt?: SortOrder
    isCurrent?: SortOrder
    _count?: CatalogFileCountOrderByAggregateInput
    _avg?: CatalogFileAvgOrderByAggregateInput
    _max?: CatalogFileMaxOrderByAggregateInput
    _min?: CatalogFileMinOrderByAggregateInput
    _sum?: CatalogFileSumOrderByAggregateInput
  }

  export type CatalogFileScalarWhereWithAggregatesInput = {
    AND?: CatalogFileScalarWhereWithAggregatesInput | CatalogFileScalarWhereWithAggregatesInput[]
    OR?: CatalogFileScalarWhereWithAggregatesInput[]
    NOT?: CatalogFileScalarWhereWithAggregatesInput | CatalogFileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CatalogFile"> | number
    fileUrl?: StringWithAggregatesFilter<"CatalogFile"> | string
    fileName?: StringWithAggregatesFilter<"CatalogFile"> | string
    version?: StringNullableWithAggregatesFilter<"CatalogFile"> | string | null
    uploadedAt?: DateTimeWithAggregatesFilter<"CatalogFile"> | Date | string
    isCurrent?: BoolWithAggregatesFilter<"CatalogFile"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    imageUrl?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    price?: FloatNullableFilter<"Product"> | number | null
    rating?: FloatNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    price?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    imageUrl?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    price?: FloatNullableFilter<"Product"> | number | null
    rating?: FloatNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    price?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    imageUrl?: StringWithAggregatesFilter<"Product"> | string
    category?: StringWithAggregatesFilter<"Product"> | string
    price?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    rating?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type StoreLocationWhereInput = {
    AND?: StoreLocationWhereInput | StoreLocationWhereInput[]
    OR?: StoreLocationWhereInput[]
    NOT?: StoreLocationWhereInput | StoreLocationWhereInput[]
    id?: IntFilter<"StoreLocation"> | number
    name?: StringFilter<"StoreLocation"> | string
    address?: StringFilter<"StoreLocation"> | string
    lat?: FloatFilter<"StoreLocation"> | number
    lng?: FloatFilter<"StoreLocation"> | number
    phone?: StringNullableFilter<"StoreLocation"> | string | null
    createdAt?: DateTimeFilter<"StoreLocation"> | Date | string
    updatedAt?: DateTimeFilter<"StoreLocation"> | Date | string
  }

  export type StoreLocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StoreLocationWhereInput | StoreLocationWhereInput[]
    OR?: StoreLocationWhereInput[]
    NOT?: StoreLocationWhereInput | StoreLocationWhereInput[]
    name?: StringFilter<"StoreLocation"> | string
    address?: StringFilter<"StoreLocation"> | string
    lat?: FloatFilter<"StoreLocation"> | number
    lng?: FloatFilter<"StoreLocation"> | number
    phone?: StringNullableFilter<"StoreLocation"> | string | null
    createdAt?: DateTimeFilter<"StoreLocation"> | Date | string
    updatedAt?: DateTimeFilter<"StoreLocation"> | Date | string
  }, "id">

  export type StoreLocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoreLocationCountOrderByAggregateInput
    _avg?: StoreLocationAvgOrderByAggregateInput
    _max?: StoreLocationMaxOrderByAggregateInput
    _min?: StoreLocationMinOrderByAggregateInput
    _sum?: StoreLocationSumOrderByAggregateInput
  }

  export type StoreLocationScalarWhereWithAggregatesInput = {
    AND?: StoreLocationScalarWhereWithAggregatesInput | StoreLocationScalarWhereWithAggregatesInput[]
    OR?: StoreLocationScalarWhereWithAggregatesInput[]
    NOT?: StoreLocationScalarWhereWithAggregatesInput | StoreLocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StoreLocation"> | number
    name?: StringWithAggregatesFilter<"StoreLocation"> | string
    address?: StringWithAggregatesFilter<"StoreLocation"> | string
    lat?: FloatWithAggregatesFilter<"StoreLocation"> | number
    lng?: FloatWithAggregatesFilter<"StoreLocation"> | number
    phone?: StringNullableWithAggregatesFilter<"StoreLocation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StoreLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StoreLocation"> | Date | string
  }

  export type AboutPageWhereInput = {
    AND?: AboutPageWhereInput | AboutPageWhereInput[]
    OR?: AboutPageWhereInput[]
    NOT?: AboutPageWhereInput | AboutPageWhereInput[]
    id?: IntFilter<"AboutPage"> | number
    heroImage?: StringFilter<"AboutPage"> | string
    story?: StringFilter<"AboutPage"> | string
    stats?: StringFilter<"AboutPage"> | string
    manufacturingExcellence?: StringFilter<"AboutPage"> | string
    updatedAt?: DateTimeFilter<"AboutPage"> | Date | string
    teamProfiles?: TeamProfileListRelationFilter
  }

  export type AboutPageOrderByWithRelationInput = {
    id?: SortOrder
    heroImage?: SortOrder
    story?: SortOrder
    stats?: SortOrder
    manufacturingExcellence?: SortOrder
    updatedAt?: SortOrder
    teamProfiles?: TeamProfileOrderByRelationAggregateInput
  }

  export type AboutPageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AboutPageWhereInput | AboutPageWhereInput[]
    OR?: AboutPageWhereInput[]
    NOT?: AboutPageWhereInput | AboutPageWhereInput[]
    heroImage?: StringFilter<"AboutPage"> | string
    story?: StringFilter<"AboutPage"> | string
    stats?: StringFilter<"AboutPage"> | string
    manufacturingExcellence?: StringFilter<"AboutPage"> | string
    updatedAt?: DateTimeFilter<"AboutPage"> | Date | string
    teamProfiles?: TeamProfileListRelationFilter
  }, "id">

  export type AboutPageOrderByWithAggregationInput = {
    id?: SortOrder
    heroImage?: SortOrder
    story?: SortOrder
    stats?: SortOrder
    manufacturingExcellence?: SortOrder
    updatedAt?: SortOrder
    _count?: AboutPageCountOrderByAggregateInput
    _avg?: AboutPageAvgOrderByAggregateInput
    _max?: AboutPageMaxOrderByAggregateInput
    _min?: AboutPageMinOrderByAggregateInput
    _sum?: AboutPageSumOrderByAggregateInput
  }

  export type AboutPageScalarWhereWithAggregatesInput = {
    AND?: AboutPageScalarWhereWithAggregatesInput | AboutPageScalarWhereWithAggregatesInput[]
    OR?: AboutPageScalarWhereWithAggregatesInput[]
    NOT?: AboutPageScalarWhereWithAggregatesInput | AboutPageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AboutPage"> | number
    heroImage?: StringWithAggregatesFilter<"AboutPage"> | string
    story?: StringWithAggregatesFilter<"AboutPage"> | string
    stats?: StringWithAggregatesFilter<"AboutPage"> | string
    manufacturingExcellence?: StringWithAggregatesFilter<"AboutPage"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"AboutPage"> | Date | string
  }

  export type TeamProfileWhereInput = {
    AND?: TeamProfileWhereInput | TeamProfileWhereInput[]
    OR?: TeamProfileWhereInput[]
    NOT?: TeamProfileWhereInput | TeamProfileWhereInput[]
    id?: IntFilter<"TeamProfile"> | number
    aboutPageId?: IntFilter<"TeamProfile"> | number
    name?: StringFilter<"TeamProfile"> | string
    imageUrl?: StringFilter<"TeamProfile"> | string
    aboutPage?: XOR<AboutPageRelationFilter, AboutPageWhereInput>
  }

  export type TeamProfileOrderByWithRelationInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    aboutPage?: AboutPageOrderByWithRelationInput
  }

  export type TeamProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamProfileWhereInput | TeamProfileWhereInput[]
    OR?: TeamProfileWhereInput[]
    NOT?: TeamProfileWhereInput | TeamProfileWhereInput[]
    aboutPageId?: IntFilter<"TeamProfile"> | number
    name?: StringFilter<"TeamProfile"> | string
    imageUrl?: StringFilter<"TeamProfile"> | string
    aboutPage?: XOR<AboutPageRelationFilter, AboutPageWhereInput>
  }, "id">

  export type TeamProfileOrderByWithAggregationInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    _count?: TeamProfileCountOrderByAggregateInput
    _avg?: TeamProfileAvgOrderByAggregateInput
    _max?: TeamProfileMaxOrderByAggregateInput
    _min?: TeamProfileMinOrderByAggregateInput
    _sum?: TeamProfileSumOrderByAggregateInput
  }

  export type TeamProfileScalarWhereWithAggregatesInput = {
    AND?: TeamProfileScalarWhereWithAggregatesInput | TeamProfileScalarWhereWithAggregatesInput[]
    OR?: TeamProfileScalarWhereWithAggregatesInput[]
    NOT?: TeamProfileScalarWhereWithAggregatesInput | TeamProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamProfile"> | number
    aboutPageId?: IntWithAggregatesFilter<"TeamProfile"> | number
    name?: StringWithAggregatesFilter<"TeamProfile"> | string
    imageUrl?: StringWithAggregatesFilter<"TeamProfile"> | string
  }

  export type DistributorPageWhereInput = {
    AND?: DistributorPageWhereInput | DistributorPageWhereInput[]
    OR?: DistributorPageWhereInput[]
    NOT?: DistributorPageWhereInput | DistributorPageWhereInput[]
    id?: IntFilter<"DistributorPage"> | number
    infoSections?: StringFilter<"DistributorPage"> | string
    requirements?: StringFilter<"DistributorPage"> | string
    supportServices?: StringFilter<"DistributorPage"> | string
    updatedAt?: DateTimeFilter<"DistributorPage"> | Date | string
    stories?: DistributorStoryListRelationFilter
  }

  export type DistributorPageOrderByWithRelationInput = {
    id?: SortOrder
    infoSections?: SortOrder
    requirements?: SortOrder
    supportServices?: SortOrder
    updatedAt?: SortOrder
    stories?: DistributorStoryOrderByRelationAggregateInput
  }

  export type DistributorPageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DistributorPageWhereInput | DistributorPageWhereInput[]
    OR?: DistributorPageWhereInput[]
    NOT?: DistributorPageWhereInput | DistributorPageWhereInput[]
    infoSections?: StringFilter<"DistributorPage"> | string
    requirements?: StringFilter<"DistributorPage"> | string
    supportServices?: StringFilter<"DistributorPage"> | string
    updatedAt?: DateTimeFilter<"DistributorPage"> | Date | string
    stories?: DistributorStoryListRelationFilter
  }, "id">

  export type DistributorPageOrderByWithAggregationInput = {
    id?: SortOrder
    infoSections?: SortOrder
    requirements?: SortOrder
    supportServices?: SortOrder
    updatedAt?: SortOrder
    _count?: DistributorPageCountOrderByAggregateInput
    _avg?: DistributorPageAvgOrderByAggregateInput
    _max?: DistributorPageMaxOrderByAggregateInput
    _min?: DistributorPageMinOrderByAggregateInput
    _sum?: DistributorPageSumOrderByAggregateInput
  }

  export type DistributorPageScalarWhereWithAggregatesInput = {
    AND?: DistributorPageScalarWhereWithAggregatesInput | DistributorPageScalarWhereWithAggregatesInput[]
    OR?: DistributorPageScalarWhereWithAggregatesInput[]
    NOT?: DistributorPageScalarWhereWithAggregatesInput | DistributorPageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DistributorPage"> | number
    infoSections?: StringWithAggregatesFilter<"DistributorPage"> | string
    requirements?: StringWithAggregatesFilter<"DistributorPage"> | string
    supportServices?: StringWithAggregatesFilter<"DistributorPage"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"DistributorPage"> | Date | string
  }

  export type DistributorStoryWhereInput = {
    AND?: DistributorStoryWhereInput | DistributorStoryWhereInput[]
    OR?: DistributorStoryWhereInput[]
    NOT?: DistributorStoryWhereInput | DistributorStoryWhereInput[]
    id?: IntFilter<"DistributorStory"> | number
    distributorPageId?: IntFilter<"DistributorStory"> | number
    title?: StringFilter<"DistributorStory"> | string
    content?: StringFilter<"DistributorStory"> | string
    imageUrl?: StringFilter<"DistributorStory"> | string
    distributorPage?: XOR<DistributorPageRelationFilter, DistributorPageWhereInput>
  }

  export type DistributorStoryOrderByWithRelationInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    distributorPage?: DistributorPageOrderByWithRelationInput
  }

  export type DistributorStoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DistributorStoryWhereInput | DistributorStoryWhereInput[]
    OR?: DistributorStoryWhereInput[]
    NOT?: DistributorStoryWhereInput | DistributorStoryWhereInput[]
    distributorPageId?: IntFilter<"DistributorStory"> | number
    title?: StringFilter<"DistributorStory"> | string
    content?: StringFilter<"DistributorStory"> | string
    imageUrl?: StringFilter<"DistributorStory"> | string
    distributorPage?: XOR<DistributorPageRelationFilter, DistributorPageWhereInput>
  }, "id">

  export type DistributorStoryOrderByWithAggregationInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
    _count?: DistributorStoryCountOrderByAggregateInput
    _avg?: DistributorStoryAvgOrderByAggregateInput
    _max?: DistributorStoryMaxOrderByAggregateInput
    _min?: DistributorStoryMinOrderByAggregateInput
    _sum?: DistributorStorySumOrderByAggregateInput
  }

  export type DistributorStoryScalarWhereWithAggregatesInput = {
    AND?: DistributorStoryScalarWhereWithAggregatesInput | DistributorStoryScalarWhereWithAggregatesInput[]
    OR?: DistributorStoryScalarWhereWithAggregatesInput[]
    NOT?: DistributorStoryScalarWhereWithAggregatesInput | DistributorStoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DistributorStory"> | number
    distributorPageId?: IntWithAggregatesFilter<"DistributorStory"> | number
    title?: StringWithAggregatesFilter<"DistributorStory"> | string
    content?: StringWithAggregatesFilter<"DistributorStory"> | string
    imageUrl?: StringWithAggregatesFilter<"DistributorStory"> | string
  }

  export type ContactSettingsCreateInput = {
    id?: number
    phoneNumber: string
    whatsappNumber: string
    emailAddress: string
    updatedAt?: Date | string
  }

  export type ContactSettingsUncheckedCreateInput = {
    id?: number
    phoneNumber: string
    whatsappNumber: string
    emailAddress: string
    updatedAt?: Date | string
  }

  export type ContactSettingsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    whatsappNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    whatsappNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactSettingsCreateManyInput = {
    id?: number
    phoneNumber: string
    whatsappNumber: string
    emailAddress: string
    updatedAt?: Date | string
  }

  export type ContactSettingsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    whatsappNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: StringFieldUpdateOperationsInput | string
    whatsappNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CatalogFileCreateInput = {
    fileUrl: string
    fileName: string
    version?: string | null
    uploadedAt?: Date | string
    isCurrent?: boolean
  }

  export type CatalogFileUncheckedCreateInput = {
    id?: number
    fileUrl: string
    fileName: string
    version?: string | null
    uploadedAt?: Date | string
    isCurrent?: boolean
  }

  export type CatalogFileUpdateInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CatalogFileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CatalogFileCreateManyInput = {
    id?: number
    fileUrl: string
    fileName: string
    version?: string | null
    uploadedAt?: Date | string
    isCurrent?: boolean
  }

  export type CatalogFileUpdateManyMutationInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CatalogFileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    version?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    createdAt?: Date | string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    name: string
    description: string
    imageUrl: string
    category: string
    price?: number | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    imageUrl: string
    category: string
    price?: number | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    description: string
    imageUrl: string
    category: string
    price?: number | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreLocationCreateInput = {
    name: string
    address: string
    lat: number
    lng: number
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreLocationUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    lat: number
    lng: number
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreLocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreLocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreLocationCreateManyInput = {
    id?: number
    name: string
    address: string
    lat: number
    lng: number
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreLocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreLocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutPageCreateInput = {
    id?: number
    heroImage: string
    story: string
    stats: string
    manufacturingExcellence: string
    updatedAt?: Date | string
    teamProfiles?: TeamProfileCreateNestedManyWithoutAboutPageInput
  }

  export type AboutPageUncheckedCreateInput = {
    id?: number
    heroImage: string
    story: string
    stats: string
    manufacturingExcellence: string
    updatedAt?: Date | string
    teamProfiles?: TeamProfileUncheckedCreateNestedManyWithoutAboutPageInput
  }

  export type AboutPageUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    heroImage?: StringFieldUpdateOperationsInput | string
    story?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    manufacturingExcellence?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamProfiles?: TeamProfileUpdateManyWithoutAboutPageNestedInput
  }

  export type AboutPageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    heroImage?: StringFieldUpdateOperationsInput | string
    story?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    manufacturingExcellence?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamProfiles?: TeamProfileUncheckedUpdateManyWithoutAboutPageNestedInput
  }

  export type AboutPageCreateManyInput = {
    id?: number
    heroImage: string
    story: string
    stats: string
    manufacturingExcellence: string
    updatedAt?: Date | string
  }

  export type AboutPageUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    heroImage?: StringFieldUpdateOperationsInput | string
    story?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    manufacturingExcellence?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutPageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    heroImage?: StringFieldUpdateOperationsInput | string
    story?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    manufacturingExcellence?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamProfileCreateInput = {
    name: string
    imageUrl: string
    aboutPage: AboutPageCreateNestedOneWithoutTeamProfilesInput
  }

  export type TeamProfileUncheckedCreateInput = {
    id?: number
    aboutPageId: number
    name: string
    imageUrl: string
  }

  export type TeamProfileUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    aboutPage?: AboutPageUpdateOneRequiredWithoutTeamProfilesNestedInput
  }

  export type TeamProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    aboutPageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TeamProfileCreateManyInput = {
    id?: number
    aboutPageId: number
    name: string
    imageUrl: string
  }

  export type TeamProfileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TeamProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    aboutPageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type DistributorPageCreateInput = {
    id?: number
    infoSections: string
    requirements: string
    supportServices: string
    updatedAt?: Date | string
    stories?: DistributorStoryCreateNestedManyWithoutDistributorPageInput
  }

  export type DistributorPageUncheckedCreateInput = {
    id?: number
    infoSections: string
    requirements: string
    supportServices: string
    updatedAt?: Date | string
    stories?: DistributorStoryUncheckedCreateNestedManyWithoutDistributorPageInput
  }

  export type DistributorPageUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    infoSections?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    supportServices?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stories?: DistributorStoryUpdateManyWithoutDistributorPageNestedInput
  }

  export type DistributorPageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    infoSections?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    supportServices?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stories?: DistributorStoryUncheckedUpdateManyWithoutDistributorPageNestedInput
  }

  export type DistributorPageCreateManyInput = {
    id?: number
    infoSections: string
    requirements: string
    supportServices: string
    updatedAt?: Date | string
  }

  export type DistributorPageUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    infoSections?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    supportServices?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributorPageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    infoSections?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    supportServices?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributorStoryCreateInput = {
    title: string
    content: string
    imageUrl: string
    distributorPage: DistributorPageCreateNestedOneWithoutStoriesInput
  }

  export type DistributorStoryUncheckedCreateInput = {
    id?: number
    distributorPageId: number
    title: string
    content: string
    imageUrl: string
  }

  export type DistributorStoryUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    distributorPage?: DistributorPageUpdateOneRequiredWithoutStoriesNestedInput
  }

  export type DistributorStoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributorPageId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type DistributorStoryCreateManyInput = {
    id?: number
    distributorPageId: number
    title: string
    content: string
    imageUrl: string
  }

  export type DistributorStoryUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type DistributorStoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    distributorPageId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ContactSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    whatsappNumber?: SortOrder
    emailAddress?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    whatsappNumber?: SortOrder
    emailAddress?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    whatsappNumber?: SortOrder
    emailAddress?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContactSettingsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CatalogFileCountOrderByAggregateInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    version?: SortOrder
    uploadedAt?: SortOrder
    isCurrent?: SortOrder
  }

  export type CatalogFileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CatalogFileMaxOrderByAggregateInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    version?: SortOrder
    uploadedAt?: SortOrder
    isCurrent?: SortOrder
  }

  export type CatalogFileMinOrderByAggregateInput = {
    id?: SortOrder
    fileUrl?: SortOrder
    fileName?: SortOrder
    version?: SortOrder
    uploadedAt?: SortOrder
    isCurrent?: SortOrder
  }

  export type CatalogFileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    rating?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    category?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    rating?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StoreLocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreLocationAvgOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type StoreLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreLocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreLocationSumOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TeamProfileListRelationFilter = {
    every?: TeamProfileWhereInput
    some?: TeamProfileWhereInput
    none?: TeamProfileWhereInput
  }

  export type TeamProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AboutPageCountOrderByAggregateInput = {
    id?: SortOrder
    heroImage?: SortOrder
    story?: SortOrder
    stats?: SortOrder
    manufacturingExcellence?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutPageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutPageMaxOrderByAggregateInput = {
    id?: SortOrder
    heroImage?: SortOrder
    story?: SortOrder
    stats?: SortOrder
    manufacturingExcellence?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutPageMinOrderByAggregateInput = {
    id?: SortOrder
    heroImage?: SortOrder
    story?: SortOrder
    stats?: SortOrder
    manufacturingExcellence?: SortOrder
    updatedAt?: SortOrder
  }

  export type AboutPageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutPageRelationFilter = {
    is?: AboutPageWhereInput
    isNot?: AboutPageWhereInput
  }

  export type TeamProfileCountOrderByAggregateInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type TeamProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
  }

  export type TeamProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type TeamProfileMinOrderByAggregateInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type TeamProfileSumOrderByAggregateInput = {
    id?: SortOrder
    aboutPageId?: SortOrder
  }

  export type DistributorStoryListRelationFilter = {
    every?: DistributorStoryWhereInput
    some?: DistributorStoryWhereInput
    none?: DistributorStoryWhereInput
  }

  export type DistributorStoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DistributorPageCountOrderByAggregateInput = {
    id?: SortOrder
    infoSections?: SortOrder
    requirements?: SortOrder
    supportServices?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributorPageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DistributorPageMaxOrderByAggregateInput = {
    id?: SortOrder
    infoSections?: SortOrder
    requirements?: SortOrder
    supportServices?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributorPageMinOrderByAggregateInput = {
    id?: SortOrder
    infoSections?: SortOrder
    requirements?: SortOrder
    supportServices?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributorPageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DistributorPageRelationFilter = {
    is?: DistributorPageWhereInput
    isNot?: DistributorPageWhereInput
  }

  export type DistributorStoryCountOrderByAggregateInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
  }

  export type DistributorStoryAvgOrderByAggregateInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
  }

  export type DistributorStoryMaxOrderByAggregateInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
  }

  export type DistributorStoryMinOrderByAggregateInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    imageUrl?: SortOrder
  }

  export type DistributorStorySumOrderByAggregateInput = {
    id?: SortOrder
    distributorPageId?: SortOrder
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamProfileCreateNestedManyWithoutAboutPageInput = {
    create?: XOR<TeamProfileCreateWithoutAboutPageInput, TeamProfileUncheckedCreateWithoutAboutPageInput> | TeamProfileCreateWithoutAboutPageInput[] | TeamProfileUncheckedCreateWithoutAboutPageInput[]
    connectOrCreate?: TeamProfileCreateOrConnectWithoutAboutPageInput | TeamProfileCreateOrConnectWithoutAboutPageInput[]
    createMany?: TeamProfileCreateManyAboutPageInputEnvelope
    connect?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
  }

  export type TeamProfileUncheckedCreateNestedManyWithoutAboutPageInput = {
    create?: XOR<TeamProfileCreateWithoutAboutPageInput, TeamProfileUncheckedCreateWithoutAboutPageInput> | TeamProfileCreateWithoutAboutPageInput[] | TeamProfileUncheckedCreateWithoutAboutPageInput[]
    connectOrCreate?: TeamProfileCreateOrConnectWithoutAboutPageInput | TeamProfileCreateOrConnectWithoutAboutPageInput[]
    createMany?: TeamProfileCreateManyAboutPageInputEnvelope
    connect?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
  }

  export type TeamProfileUpdateManyWithoutAboutPageNestedInput = {
    create?: XOR<TeamProfileCreateWithoutAboutPageInput, TeamProfileUncheckedCreateWithoutAboutPageInput> | TeamProfileCreateWithoutAboutPageInput[] | TeamProfileUncheckedCreateWithoutAboutPageInput[]
    connectOrCreate?: TeamProfileCreateOrConnectWithoutAboutPageInput | TeamProfileCreateOrConnectWithoutAboutPageInput[]
    upsert?: TeamProfileUpsertWithWhereUniqueWithoutAboutPageInput | TeamProfileUpsertWithWhereUniqueWithoutAboutPageInput[]
    createMany?: TeamProfileCreateManyAboutPageInputEnvelope
    set?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    disconnect?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    delete?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    connect?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    update?: TeamProfileUpdateWithWhereUniqueWithoutAboutPageInput | TeamProfileUpdateWithWhereUniqueWithoutAboutPageInput[]
    updateMany?: TeamProfileUpdateManyWithWhereWithoutAboutPageInput | TeamProfileUpdateManyWithWhereWithoutAboutPageInput[]
    deleteMany?: TeamProfileScalarWhereInput | TeamProfileScalarWhereInput[]
  }

  export type TeamProfileUncheckedUpdateManyWithoutAboutPageNestedInput = {
    create?: XOR<TeamProfileCreateWithoutAboutPageInput, TeamProfileUncheckedCreateWithoutAboutPageInput> | TeamProfileCreateWithoutAboutPageInput[] | TeamProfileUncheckedCreateWithoutAboutPageInput[]
    connectOrCreate?: TeamProfileCreateOrConnectWithoutAboutPageInput | TeamProfileCreateOrConnectWithoutAboutPageInput[]
    upsert?: TeamProfileUpsertWithWhereUniqueWithoutAboutPageInput | TeamProfileUpsertWithWhereUniqueWithoutAboutPageInput[]
    createMany?: TeamProfileCreateManyAboutPageInputEnvelope
    set?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    disconnect?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    delete?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    connect?: TeamProfileWhereUniqueInput | TeamProfileWhereUniqueInput[]
    update?: TeamProfileUpdateWithWhereUniqueWithoutAboutPageInput | TeamProfileUpdateWithWhereUniqueWithoutAboutPageInput[]
    updateMany?: TeamProfileUpdateManyWithWhereWithoutAboutPageInput | TeamProfileUpdateManyWithWhereWithoutAboutPageInput[]
    deleteMany?: TeamProfileScalarWhereInput | TeamProfileScalarWhereInput[]
  }

  export type AboutPageCreateNestedOneWithoutTeamProfilesInput = {
    create?: XOR<AboutPageCreateWithoutTeamProfilesInput, AboutPageUncheckedCreateWithoutTeamProfilesInput>
    connectOrCreate?: AboutPageCreateOrConnectWithoutTeamProfilesInput
    connect?: AboutPageWhereUniqueInput
  }

  export type AboutPageUpdateOneRequiredWithoutTeamProfilesNestedInput = {
    create?: XOR<AboutPageCreateWithoutTeamProfilesInput, AboutPageUncheckedCreateWithoutTeamProfilesInput>
    connectOrCreate?: AboutPageCreateOrConnectWithoutTeamProfilesInput
    upsert?: AboutPageUpsertWithoutTeamProfilesInput
    connect?: AboutPageWhereUniqueInput
    update?: XOR<XOR<AboutPageUpdateToOneWithWhereWithoutTeamProfilesInput, AboutPageUpdateWithoutTeamProfilesInput>, AboutPageUncheckedUpdateWithoutTeamProfilesInput>
  }

  export type DistributorStoryCreateNestedManyWithoutDistributorPageInput = {
    create?: XOR<DistributorStoryCreateWithoutDistributorPageInput, DistributorStoryUncheckedCreateWithoutDistributorPageInput> | DistributorStoryCreateWithoutDistributorPageInput[] | DistributorStoryUncheckedCreateWithoutDistributorPageInput[]
    connectOrCreate?: DistributorStoryCreateOrConnectWithoutDistributorPageInput | DistributorStoryCreateOrConnectWithoutDistributorPageInput[]
    createMany?: DistributorStoryCreateManyDistributorPageInputEnvelope
    connect?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
  }

  export type DistributorStoryUncheckedCreateNestedManyWithoutDistributorPageInput = {
    create?: XOR<DistributorStoryCreateWithoutDistributorPageInput, DistributorStoryUncheckedCreateWithoutDistributorPageInput> | DistributorStoryCreateWithoutDistributorPageInput[] | DistributorStoryUncheckedCreateWithoutDistributorPageInput[]
    connectOrCreate?: DistributorStoryCreateOrConnectWithoutDistributorPageInput | DistributorStoryCreateOrConnectWithoutDistributorPageInput[]
    createMany?: DistributorStoryCreateManyDistributorPageInputEnvelope
    connect?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
  }

  export type DistributorStoryUpdateManyWithoutDistributorPageNestedInput = {
    create?: XOR<DistributorStoryCreateWithoutDistributorPageInput, DistributorStoryUncheckedCreateWithoutDistributorPageInput> | DistributorStoryCreateWithoutDistributorPageInput[] | DistributorStoryUncheckedCreateWithoutDistributorPageInput[]
    connectOrCreate?: DistributorStoryCreateOrConnectWithoutDistributorPageInput | DistributorStoryCreateOrConnectWithoutDistributorPageInput[]
    upsert?: DistributorStoryUpsertWithWhereUniqueWithoutDistributorPageInput | DistributorStoryUpsertWithWhereUniqueWithoutDistributorPageInput[]
    createMany?: DistributorStoryCreateManyDistributorPageInputEnvelope
    set?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    disconnect?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    delete?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    connect?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    update?: DistributorStoryUpdateWithWhereUniqueWithoutDistributorPageInput | DistributorStoryUpdateWithWhereUniqueWithoutDistributorPageInput[]
    updateMany?: DistributorStoryUpdateManyWithWhereWithoutDistributorPageInput | DistributorStoryUpdateManyWithWhereWithoutDistributorPageInput[]
    deleteMany?: DistributorStoryScalarWhereInput | DistributorStoryScalarWhereInput[]
  }

  export type DistributorStoryUncheckedUpdateManyWithoutDistributorPageNestedInput = {
    create?: XOR<DistributorStoryCreateWithoutDistributorPageInput, DistributorStoryUncheckedCreateWithoutDistributorPageInput> | DistributorStoryCreateWithoutDistributorPageInput[] | DistributorStoryUncheckedCreateWithoutDistributorPageInput[]
    connectOrCreate?: DistributorStoryCreateOrConnectWithoutDistributorPageInput | DistributorStoryCreateOrConnectWithoutDistributorPageInput[]
    upsert?: DistributorStoryUpsertWithWhereUniqueWithoutDistributorPageInput | DistributorStoryUpsertWithWhereUniqueWithoutDistributorPageInput[]
    createMany?: DistributorStoryCreateManyDistributorPageInputEnvelope
    set?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    disconnect?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    delete?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    connect?: DistributorStoryWhereUniqueInput | DistributorStoryWhereUniqueInput[]
    update?: DistributorStoryUpdateWithWhereUniqueWithoutDistributorPageInput | DistributorStoryUpdateWithWhereUniqueWithoutDistributorPageInput[]
    updateMany?: DistributorStoryUpdateManyWithWhereWithoutDistributorPageInput | DistributorStoryUpdateManyWithWhereWithoutDistributorPageInput[]
    deleteMany?: DistributorStoryScalarWhereInput | DistributorStoryScalarWhereInput[]
  }

  export type DistributorPageCreateNestedOneWithoutStoriesInput = {
    create?: XOR<DistributorPageCreateWithoutStoriesInput, DistributorPageUncheckedCreateWithoutStoriesInput>
    connectOrCreate?: DistributorPageCreateOrConnectWithoutStoriesInput
    connect?: DistributorPageWhereUniqueInput
  }

  export type DistributorPageUpdateOneRequiredWithoutStoriesNestedInput = {
    create?: XOR<DistributorPageCreateWithoutStoriesInput, DistributorPageUncheckedCreateWithoutStoriesInput>
    connectOrCreate?: DistributorPageCreateOrConnectWithoutStoriesInput
    upsert?: DistributorPageUpsertWithoutStoriesInput
    connect?: DistributorPageWhereUniqueInput
    update?: XOR<XOR<DistributorPageUpdateToOneWithWhereWithoutStoriesInput, DistributorPageUpdateWithoutStoriesInput>, DistributorPageUncheckedUpdateWithoutStoriesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TeamProfileCreateWithoutAboutPageInput = {
    name: string
    imageUrl: string
  }

  export type TeamProfileUncheckedCreateWithoutAboutPageInput = {
    id?: number
    name: string
    imageUrl: string
  }

  export type TeamProfileCreateOrConnectWithoutAboutPageInput = {
    where: TeamProfileWhereUniqueInput
    create: XOR<TeamProfileCreateWithoutAboutPageInput, TeamProfileUncheckedCreateWithoutAboutPageInput>
  }

  export type TeamProfileCreateManyAboutPageInputEnvelope = {
    data: TeamProfileCreateManyAboutPageInput | TeamProfileCreateManyAboutPageInput[]
  }

  export type TeamProfileUpsertWithWhereUniqueWithoutAboutPageInput = {
    where: TeamProfileWhereUniqueInput
    update: XOR<TeamProfileUpdateWithoutAboutPageInput, TeamProfileUncheckedUpdateWithoutAboutPageInput>
    create: XOR<TeamProfileCreateWithoutAboutPageInput, TeamProfileUncheckedCreateWithoutAboutPageInput>
  }

  export type TeamProfileUpdateWithWhereUniqueWithoutAboutPageInput = {
    where: TeamProfileWhereUniqueInput
    data: XOR<TeamProfileUpdateWithoutAboutPageInput, TeamProfileUncheckedUpdateWithoutAboutPageInput>
  }

  export type TeamProfileUpdateManyWithWhereWithoutAboutPageInput = {
    where: TeamProfileScalarWhereInput
    data: XOR<TeamProfileUpdateManyMutationInput, TeamProfileUncheckedUpdateManyWithoutAboutPageInput>
  }

  export type TeamProfileScalarWhereInput = {
    AND?: TeamProfileScalarWhereInput | TeamProfileScalarWhereInput[]
    OR?: TeamProfileScalarWhereInput[]
    NOT?: TeamProfileScalarWhereInput | TeamProfileScalarWhereInput[]
    id?: IntFilter<"TeamProfile"> | number
    aboutPageId?: IntFilter<"TeamProfile"> | number
    name?: StringFilter<"TeamProfile"> | string
    imageUrl?: StringFilter<"TeamProfile"> | string
  }

  export type AboutPageCreateWithoutTeamProfilesInput = {
    id?: number
    heroImage: string
    story: string
    stats: string
    manufacturingExcellence: string
    updatedAt?: Date | string
  }

  export type AboutPageUncheckedCreateWithoutTeamProfilesInput = {
    id?: number
    heroImage: string
    story: string
    stats: string
    manufacturingExcellence: string
    updatedAt?: Date | string
  }

  export type AboutPageCreateOrConnectWithoutTeamProfilesInput = {
    where: AboutPageWhereUniqueInput
    create: XOR<AboutPageCreateWithoutTeamProfilesInput, AboutPageUncheckedCreateWithoutTeamProfilesInput>
  }

  export type AboutPageUpsertWithoutTeamProfilesInput = {
    update: XOR<AboutPageUpdateWithoutTeamProfilesInput, AboutPageUncheckedUpdateWithoutTeamProfilesInput>
    create: XOR<AboutPageCreateWithoutTeamProfilesInput, AboutPageUncheckedCreateWithoutTeamProfilesInput>
    where?: AboutPageWhereInput
  }

  export type AboutPageUpdateToOneWithWhereWithoutTeamProfilesInput = {
    where?: AboutPageWhereInput
    data: XOR<AboutPageUpdateWithoutTeamProfilesInput, AboutPageUncheckedUpdateWithoutTeamProfilesInput>
  }

  export type AboutPageUpdateWithoutTeamProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    heroImage?: StringFieldUpdateOperationsInput | string
    story?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    manufacturingExcellence?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AboutPageUncheckedUpdateWithoutTeamProfilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    heroImage?: StringFieldUpdateOperationsInput | string
    story?: StringFieldUpdateOperationsInput | string
    stats?: StringFieldUpdateOperationsInput | string
    manufacturingExcellence?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributorStoryCreateWithoutDistributorPageInput = {
    title: string
    content: string
    imageUrl: string
  }

  export type DistributorStoryUncheckedCreateWithoutDistributorPageInput = {
    id?: number
    title: string
    content: string
    imageUrl: string
  }

  export type DistributorStoryCreateOrConnectWithoutDistributorPageInput = {
    where: DistributorStoryWhereUniqueInput
    create: XOR<DistributorStoryCreateWithoutDistributorPageInput, DistributorStoryUncheckedCreateWithoutDistributorPageInput>
  }

  export type DistributorStoryCreateManyDistributorPageInputEnvelope = {
    data: DistributorStoryCreateManyDistributorPageInput | DistributorStoryCreateManyDistributorPageInput[]
  }

  export type DistributorStoryUpsertWithWhereUniqueWithoutDistributorPageInput = {
    where: DistributorStoryWhereUniqueInput
    update: XOR<DistributorStoryUpdateWithoutDistributorPageInput, DistributorStoryUncheckedUpdateWithoutDistributorPageInput>
    create: XOR<DistributorStoryCreateWithoutDistributorPageInput, DistributorStoryUncheckedCreateWithoutDistributorPageInput>
  }

  export type DistributorStoryUpdateWithWhereUniqueWithoutDistributorPageInput = {
    where: DistributorStoryWhereUniqueInput
    data: XOR<DistributorStoryUpdateWithoutDistributorPageInput, DistributorStoryUncheckedUpdateWithoutDistributorPageInput>
  }

  export type DistributorStoryUpdateManyWithWhereWithoutDistributorPageInput = {
    where: DistributorStoryScalarWhereInput
    data: XOR<DistributorStoryUpdateManyMutationInput, DistributorStoryUncheckedUpdateManyWithoutDistributorPageInput>
  }

  export type DistributorStoryScalarWhereInput = {
    AND?: DistributorStoryScalarWhereInput | DistributorStoryScalarWhereInput[]
    OR?: DistributorStoryScalarWhereInput[]
    NOT?: DistributorStoryScalarWhereInput | DistributorStoryScalarWhereInput[]
    id?: IntFilter<"DistributorStory"> | number
    distributorPageId?: IntFilter<"DistributorStory"> | number
    title?: StringFilter<"DistributorStory"> | string
    content?: StringFilter<"DistributorStory"> | string
    imageUrl?: StringFilter<"DistributorStory"> | string
  }

  export type DistributorPageCreateWithoutStoriesInput = {
    id?: number
    infoSections: string
    requirements: string
    supportServices: string
    updatedAt?: Date | string
  }

  export type DistributorPageUncheckedCreateWithoutStoriesInput = {
    id?: number
    infoSections: string
    requirements: string
    supportServices: string
    updatedAt?: Date | string
  }

  export type DistributorPageCreateOrConnectWithoutStoriesInput = {
    where: DistributorPageWhereUniqueInput
    create: XOR<DistributorPageCreateWithoutStoriesInput, DistributorPageUncheckedCreateWithoutStoriesInput>
  }

  export type DistributorPageUpsertWithoutStoriesInput = {
    update: XOR<DistributorPageUpdateWithoutStoriesInput, DistributorPageUncheckedUpdateWithoutStoriesInput>
    create: XOR<DistributorPageCreateWithoutStoriesInput, DistributorPageUncheckedCreateWithoutStoriesInput>
    where?: DistributorPageWhereInput
  }

  export type DistributorPageUpdateToOneWithWhereWithoutStoriesInput = {
    where?: DistributorPageWhereInput
    data: XOR<DistributorPageUpdateWithoutStoriesInput, DistributorPageUncheckedUpdateWithoutStoriesInput>
  }

  export type DistributorPageUpdateWithoutStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    infoSections?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    supportServices?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributorPageUncheckedUpdateWithoutStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    infoSections?: StringFieldUpdateOperationsInput | string
    requirements?: StringFieldUpdateOperationsInput | string
    supportServices?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamProfileCreateManyAboutPageInput = {
    id?: number
    name: string
    imageUrl: string
  }

  export type TeamProfileUpdateWithoutAboutPageInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TeamProfileUncheckedUpdateWithoutAboutPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type TeamProfileUncheckedUpdateManyWithoutAboutPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type DistributorStoryCreateManyDistributorPageInput = {
    id?: number
    title: string
    content: string
    imageUrl: string
  }

  export type DistributorStoryUpdateWithoutDistributorPageInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type DistributorStoryUncheckedUpdateWithoutDistributorPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type DistributorStoryUncheckedUpdateManyWithoutDistributorPageInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AboutPageCountOutputTypeDefaultArgs instead
     */
    export type AboutPageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AboutPageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistributorPageCountOutputTypeDefaultArgs instead
     */
    export type DistributorPageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistributorPageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactSettingsDefaultArgs instead
     */
    export type ContactSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CatalogFileDefaultArgs instead
     */
    export type CatalogFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CatalogFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoreLocationDefaultArgs instead
     */
    export type StoreLocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoreLocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AboutPageDefaultArgs instead
     */
    export type AboutPageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AboutPageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamProfileDefaultArgs instead
     */
    export type TeamProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistributorPageDefaultArgs instead
     */
    export type DistributorPageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistributorPageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DistributorStoryDefaultArgs instead
     */
    export type DistributorStoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DistributorStoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}